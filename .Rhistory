lowScaleLevel3Fungus = lowScaleLevel3Fungus
return(lowScaleLevel3Fungus)
}
}
lowScaleLevel3Fungus <- unlist(lapply(scales_dd2$lowScaleLevel3Fungus, lowScaleLevel3Fungus))
lowScaleLevel3Fungus
lowScaleLevel4Fungus <- function(lowScaleLevel4Fungus) {
if(is.na(lowScaleLevel4Fungus) == TRUE) {
lowScaleLevel4Fungus = 0
} else {
lowScaleLevel4Fungus = lowScaleLevel4Fungus
}
}
lowScaleLevel4Fungus <- unlist(lapply(scales_dd2$lowScaleLevel4Fungus, lowScaleLevel4Fungus))
lowScaleLevel4Fungus
mediumScaleZeroFungus <- function(mediumScaleZeroFungus) {
if(is.na(mediumScaleZeroFungus) == TRUE) {
mediumScaleZeroFungus = 0
} else {
mediumScaleZeroFungus = mediumScaleZeroFungus
}
}
mediumScaleZeroFungus <- unlist(lapply(scales_dd2$mediumScaleZeroFungus, mediumScaleZeroFungus))
mediumScaleZeroFungus
mediumScaleLevel1Fungus <- function(mediumScaleLevel1Fungus) {
if(is.na(mediumScaleLevel1Fungus) == TRUE) {
mediumScaleLevel1Fungus = 0
} else {
mediumScaleLevel1Fungus = mediumScaleLevel1Fungus
}
}
mediumScaleLevel1Fungus <- unlist(lapply(scales_dd2$mediumScaleLevel1Fungus, mediumScaleLevel1Fungus))
mediumScaleLevel1Fungus
mediumScaleLevel2Fungus <- function(mediumScaleLevel2Fungus) {
if(is.na(mediumScaleLevel2Fungus) == TRUE) {
mediumScaleLevel2Fungus = 0
} else {
mediumScaleLevel2Fungus = mediumScaleLevel2Fungus
}
}
mediumScaleLevel2Fungus <- unlist(lapply(scales_dd2$mediumScaleLevel2Fungus, mediumScaleLevel2Fungus))
mediumScaleLevel2Fungus
mediumScaleLevel3Fungus <- function(mediumScaleLevel3Fungus) {
if(is.na(mediumScaleLevel3Fungus) == TRUE) {
mediumScaleLevel3Fungus = 0
} else {
mediumScaleLevel3Fungus = mediumScaleLevel3Fungus
}
}
mediumScaleLevel3Fungus <- unlist(lapply(scales_dd2$mediumScaleLevel3Fungus, mediumScaleLevel3Fungus))
mediumScaleLevel3Fungus
mediumScaleLevel4Fungus <- function(mediumScaleLevel4Fungus) {
if(is.na(mediumScaleLevel4Fungus) == TRUE) {
mediumScaleLevel4Fungus = 0
} else {
mediumScaleLevel4Fungus = mediumScaleLevel4Fungus
}
}
mediumScaleLevel4Fungus <- unlist(lapply(scales_dd2$mediumScaleLevel4Fungus, mediumScaleLevel4Fungus))
mediumScaleLevel4Fungus
highScaleZeroFungus <- function(highScaleZeroFungus) {
if(is.na(highScaleZeroFungus) == TRUE) {
highScaleZeroFungus = 0
} else {
highScaleZeroFungus = highScaleZeroFungus
}
}
highScaleZeroFungus <- unlist(lapply(scales_dd2$highScaleZeroFungus, highScaleZeroFungus))
highScaleZeroFungus
highScaleLevel1Fungus <- function(highScaleLevel1Fungus) {
if(is.na(highScaleLevel1Fungus) == TRUE) {
highScaleLevel1Fungus = 0
} else {
highScaleLevel1Fungus = highScaleLevel1Fungus
}
}
highScaleLevel1Fungus <- unlist(lapply(scales_dd2$highScaleLevel1Fungus, highScaleLevel1Fungus))
highScaleLevel1Fungus
highScaleLevel2Fungus <- function(highScaleLevel2Fungus) {
if(is.na(highScaleLevel2Fungus) == TRUE) {
highScaleLevel2Fungus = 0
} else {
highScaleLevel2Fungus = highScaleLevel2Fungus
}
}
highScaleLevel2Fungus <- unlist(lapply(scales_dd2$highScaleLevel2Fungus, highScaleLevel2Fungus))
highScaleLevel2Fungus
highScaleLevel3Fungus <- function(highScaleLevel3Fungus) {
if(is.na(highScaleLevel3Fungus) == TRUE) {
highScaleLevel3Fungus = 0
} else {
highScaleLevel3Fungus = highScaleLevel3Fungus
}
}
highScaleLevel3Fungus <- unlist(lapply(scales_dd2$highScaleLevel3Fungus, highScaleLevel3Fungus))
highScaleLevel3Fungus
highScaleLevel4Fungus <- function(highScaleLevel4Fungus) {
if(is.na(highScaleLevel4Fungus) == TRUE) {
highScaleLevel4Fungus = 0
} else {
highScaleLevel4Fungus = highScaleLevel4Fungus
}
}
highScaleLevel4Fungus <- unlist(lapply(scales_dd2$highScaleLevel4Fungus, highScaleLevel4Fungus))
highScaleLevel4Fungus
superScaleZeroFungus <- function(superScaleZeroFungus) {
if(is.na(superScaleZeroFungus) == TRUE) {
superScaleZeroFungus = 0
} else {
superScaleZeroFungus = superScaleZeroFungus
}
}
superScaleZeroFungus <- unlist(lapply(scales_dd2$superScaleZeroFungus, superScaleZeroFungus))
superScaleZeroFungus
superScaleLevel1Fungus <- function(superScaleLevel1Fungus) {
if(is.na(superScaleLevel1Fungus) == TRUE) {
superScaleLevel1Fungus = 0
} else {
superScaleLevel1Fungus = superScaleLevel1Fungus
}
}
superScaleLevel1Fungus <- unlist(lapply(scales_dd2$superScaleLevel1Fungus, superScaleLevel1Fungus))
superScaleLevel1Fungus
superScaleLevel2Fungus <- function(superScaleLevel2Fungus) {
if(is.na(superScaleLevel2Fungus) == TRUE) {
superScaleLevel2Fungus = 0
} else {
superScaleLevel2Fungus = superScaleLevel2Fungus
}
}
superScaleLevel2Fungus <- unlist(lapply(scales_dd2$superScaleLevel2Fungus, superScaleLevel2Fungus))
superScaleLevel2Fungus
superScaleLevel3Fungus <- function(superScaleLevel3Fungus) {
if(is.na(superScaleLevel3Fungus) == TRUE) {
superScaleLevel3Fungus = 0
} else {
superScaleLevel3Fungus = superScaleLevel3Fungus
}
}
superScaleLevel3Fungus <- unlist(lapply(scales_dd2$superScaleLevel3Fungus, superScaleLevel3Fungus))
superScaleLevel3Fungus
superScaleLevel4Fungus <- function(superScaleLevel4Fungus) {
if(is.na(superScaleLevel4Fungus) == TRUE) {
superScaleLevel4Fungus = 0
} else {
superScaleLevel4Fungus = superScaleLevel4Fungus
}
}
superScaleLevel4Fungus <- unlist(lapply(scales_dd2$superScaleLevel4Fungus, superScaleLevel4Fungus))
superScaleLevel4Fungus
#scales categories: low 0-6; medium 7-30; high 31-70; super >70
#fungus: 1: 0-25%; 2: 25-50%; 3: 50 - 75%; 4: 75 - 100%
#
healthyscales <- function(
lowScaleZeroFungus, lowScaleLevel1Fungus, lowScaleLevel2Fungus, lowScaleLevel3Fungus, lowScaleLevel4Fungus,
mediumScaleZeroFungus, mediumScaleLevel1Fungus, mediumScaleLevel2Fungus, mediumScaleLevel3Fungus, mediumScaleLevel4Fungus,
highScaleZeroFungus, highScaleLevel1Fungus, highScaleLevel2Fungus, highScaleLevel3Fungus, highScaleLevel4Fungus,
superScaleZeroFungus, superScaleLevel1Fungus, superScaleLevel2Fungus, superScaleLevel3Fungus, superScaleLevel4Fungus
) {
lows = 3 * lowScaleZeroFungus + 3 * lowScaleLevel1Fungus * (1-0.125) + 3 * lowScaleLevel2Fungus * (1 - 0.375)+ 3 * lowScaleLevel3Fungus * (1 - 0.625) + 3 * lowScaleLevel4Fungus * (1 - 0.875)
mediums = 18.5 * mediumScaleZeroFungus + 18.5 * mediumScaleLevel1Fungus * (1-0.12) + 18.5 * mediumScaleLevel2Fungus * (1 - 0.375)+ 18.5 * mediumScaleLevel3Fungus * (1 - 0.625) + 18.5 * mediumScaleLevel4Fungus * (1 - 0.875)
highs = 55.5 * highScaleZeroFungus + 55.5 * highScaleLevel1Fungus * (1-0.125) + 55.5 * highScaleLevel2Fungus * (1 - 0.375)+ 55.5 * highScaleLevel3Fungus * (1 - 0.625) + 55.5 * highScaleLevel4Fungus * (1 - 0.875)
supers = 120 * superScaleZeroFungus + 120 * superScaleLevel1Fungus * (1-0.125) + 120 * superScaleLevel2Fungus * (1 - 0.375)+ 120 * superScaleLevel3Fungus * (1 - 0.625) + 120 * superScaleLevel4Fungus * (1 - 0.875)
allscales = lows + mediums + highs + supers
allscales
}
highhealthyscales <- mapply(
healthyscales,
lowScaleZeroFungus,
lowScaleLevel1Fungus,
lowScaleLevel2Fungus,
lowScaleLevel3Fungus,
lowScaleLevel4Fungus,
mediumScaleZeroFungus,
mediumScaleLevel1Fungus,
mediumScaleLevel2Fungus,
mediumScaleLevel3Fungus,
mediumScaleLevel4Fungus,
highScaleZeroFungus,
highScaleLevel1Fungus,
highScaleLevel2Fungus,
highScaleLevel3Fungus,
highScaleLevel4Fungus,
superScaleZeroFungus,
superScaleLevel1Fungus,
superScaleLevel2Fungus,
superScaleLevel3Fungus,
superScaleLevel4Fungus
)
highhealthyscales
scales_dd2$highhealthyscales <- highhealthyscales
scales_dd2$lowhealthyscales <- lowscales
scales_dd2$group <- groups
scales_density <- scales_dd2 %>% group_by(group) %>%
summarise(
sumhighscales = sum(highhealthyscales),
sumlowscales = sum(lowhealthyscales),
sumhealthyscales = sum(sumhighscales, sumlowscales)
)
scales_density <- data.frame(scales_density)
scales_density
sub_dd2 <- data.frame(sub_dd2)
sub_dd2
newdt <- cbind(sub_dd2, scales_density)
newdt
newdt$inverse_predrisk <- newdt$totalbeetles/newdt$sumhighscales
newdt$inverse_predrisk
newdt$predrisk <- newdt$sumhealthyscales/newdt$totalbeetles
length(which(is.infinite(newdt$inverse_predrisk)))
length(which(newdt$totalPhoridAttacks == 0))
plot(newdt$predrisk ~ newdt$totalPhoridAttacks)
write.csv(newdt, "predrisk_phorids_augsep2009.csv", row.names = FALSE)
nt2 <- newdt[is.finite(newdt$predrisk),]
nt2 <- nt2[nt2$predrisk < 548,]
dim(nt2)
head(nt2)
model <- lm(nt2$predrisk ~ nt2$totalPhoridAttacks)
summary(model)
plot(nt2$predrisk ~ nt2$totalPhoridAttacks)
library(quantreg)
qr1 <- rq(predrisk ~ totalPhoridAttacks, data=nt2, tau = c(0.8, 0.70, 0.65, 0.6, 0.55, 0.52))
summary(qr1, se = "nid")
abline(rq(predrisk ~ totalPhoridAttacks, data = nt2, tau = c(0.80)), col = "blue", lty = 2)
abline(rq(predrisk ~ totalPhoridAttacks, data = nt2, tau = 0.55), col = "blue")
NT <- rbind(nt, nt2)
#NT <- NT[NT$predrisk < 3000, ]
plot(NT$predrisk ~ NT$totalPhoridAttacks)
QR1 <- rq(NT$predrisk ~ NT$totalPhoridAttacks, tau = c(0.9, 0.85, 0.80, 0.75, 0.70, 0.65, 0.60, 0.55, 0.50))
summary(QR1, se = "nid")
abline(rq(predrisk ~ totalPhoridAttacks, data = nt2, tau = c(0.80)), col = "blue", lty = 2)
abline(rq(predrisk ~ totalPhoridAttacks, data = nt2, tau = 0.55), col = "blue")
devtools::document()
devtools::check()
library(biotaxa)
taxa_rich("Animalia", "Genus")
rm(list=ls())
taxa_rich("Animalia", "Genus")
devtools::document()
devtools::check()
devtools::install()
library(biotaxa)
taxa_rich("Animalia", "Species")
library(biotaxa)
taxamodel("Arthropoda", "Species", "logistic")
taxamodel("Mollusca", "Species", "logistic")
taxamodel("Chordata", "Species", "logistic")
taxamodel("Cnidaria", "Species", "logistic")
taxamodel("Echinodermata", "Species", "logistic")
taxamodel("Annelida", "Species", "logistic")
taxamodel("Bryozoa", "Species", "logistic")
taxamodel("Porifera", "Species", "logistic")
taxamodel("Nematoda", "Species", "logistic")
taxamodel("Brachiopoda", "Species", "logistic")
taxamodel("Nemertea", "Species", "logistic")
taxamodel("Platyhelminthes", "Species", "logistic")
taxa <- c("Malacostraca", "Gastropoda", "Actinopterygii", "Polychaeta", "Bivalvia", "Demospongiae", "Hexanauplia", "Anthozoa", "Hydrozoa")
ranks <- rep("Species", length(taxa))
strLines <- mapply(taxa_rich, taxa, ranks)
prediction_class <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][1]
}
preds_classes <- unlist(lapply(strLines, prediction_class))
actual_class <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][3]
}
actuals_classes <- unlist(lapply(strLines, actual_class))
ndf_classes <- data.frame(actuals_classes, preds_classes)
plot(actuals, preds, xlab = "Predicted number of species", ylab = "Actual number of species", pch = 19)
abline(0,1, lty = 2)
points(preds_classes, actuals_classes, pch = 2)
library(stringr)
library(drc)
library(data.table)
taxa <- c("Arthropoda","Mollusca", "Chordata", "Cnidaria", "Echinodermata","Annelida", "Bryozoa", "Porifera", "Nematoda", "Brachiopoda", "Nemertea", "Platyhelminthes")
ranks <- rep("Species", length(taxa))
strLines <- mapply(taxa_rich, taxa, ranks)
prediction <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][1]
}
preds <- as.numeric(unlist(lapply(strLines, prediction)))
actual <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][3]
}
actuals <- as.numeric(unlist(lapply(strLines, actual)))
ndf <- data.frame(taxa, actuals, preds)
#dev.new(width=5, height=5)
plot(actuals, preds, xlab = "Predicted number of species", ylab = "Actual number of species", pch = 19)
abline(0,1, lty = 2)
#text(actuals~preds, labels = taxa, data = ndf, cex = 0.7, font = 1.5)
taxa <- c("Malacostraca", "Gastropoda", "Actinopterygii", "Polychaeta", "Bivalvia", "Demospongiae", "Hexanauplia", "Anthozoa", "Hydrozoa")
ranks <- rep("Species", length(taxa))
strLines <- mapply(taxa_rich, taxa, ranks)
prediction_class <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][1]
}
preds_classes <- unlist(lapply(strLines, prediction_class))
actual_class <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][3]
}
actuals_classes <- unlist(lapply(strLines, actual_class))
ndf_classes <- data.frame(actuals_classes, preds_classes)
plot(actuals, preds, xlab = "Predicted number of species", ylab = "Actual number of species", pch = 19)
abline(0,1, lty = 2)
points(preds_classes, actuals_classes, pch = 2)
taxa <- c("Malacostraca", "Gastropoda", "Actinopterygii", "Polychaeta", "Bivalvia", "Demospongiae", "Hexanauplia", "Anthozoa", "Hydrozoa")
ranks <- rep("Species", length(taxa))
strLines <- mapply(taxa_rich, taxa, ranks)
prediction_class <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][1]
}
preds_classes <- unlist(lapply(strLines, prediction_class))
actual_class <- function(strLine) {
str_extract_all(strLine, "\\(?[0-9,.]+\\)?")[[1]][3]
}
actuals_classes <- unlist(lapply(strLines, actual_class))
ndf_classes <- data.frame(actuals_classes, preds_classes)
plot(actuals, preds, xlab = "Predicted number of species", ylab = "Actual number of species", pch = 19)
abline(0,1, lty = 2)
points(preds_classes, actuals_classes, pch = 2, cex = 0.8)
taxamodel("Animalia", "Species", "logistic")
?windows.options
windows.options(width = 5, height = 5)
plot(actuals, preds, xlab = "Predicted number of species", ylab = "Actual number of species", pch = 19)
spetaxalist("Animalia", "Phylum")
spetaxalist("Animalia", "Phyla")
richness <- function(taxa, rank) {
length(spetaxalist(taxa, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
alltaxa <- rep("Animalia", length(ranks))
allrichness <- mapply(richness, ranks, alltaxa)
allrichness
richness("Animalia", "Family")
?spetaxalist
animalia <- subsest(data_m, Kingdom == "Animalia")
dim(animalia)
head(data_m)
animalia <- subsest(data_m, Kingdoms == "Animalia")
dim(animalia)
animalia <- subset(data_m, Kingdoms == "Animalia")
dim(animalia)
animalia <- subset(data_m, Kingdoms == "Animalia")
dim(animalia)
richness <- function(taxa, rank) {
length(spetaxalist(taxa, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
alltaxa <- rep("Animalia", length(ranks))
allrichness <- mapply(richness, ranks, alltaxa)
allrichness
animalia <- subset(data_m, Kingdoms == "Animalia")
dim(animalia)
richness <- function(dataset, rank) {
length(spetaxalist(dataset = animalia, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
alltaxa <- rep("Animalia", length(ranks))
allrichness <- mapply(richness, ranks, alltaxa)
allrichness
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m , rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
alltaxa <- rep("Animalia", length(ranks))
allrichness <- lapply(ranks)
allrichness
head(data_m)
dim(data_m)
levels(data_m$Kingdoms)
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
alltaxa <- rep("Animalia", length(ranks))
allrichness <- lapply(ranks)
allrichness
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
allrichness <- lapply(ranks)
allrichness
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
allrichness <- lapply(ranks, richness)
allrichness
richness("Phylum")
richness("Class")
richness("Species")
which(data_m$Kingdoms != "Animalia")
which(data_m$Kingdoms != "Plantae")
richness("Species")
spetaxalist(data_m, "Species")
spetaxalist(data_m, "Genus")
Species
Species
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus", "AphiaID")
allrichness <- lapply(ranks, richness)
allrichness
?spetaxalist
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus")
allrichness <- lapply(ranks, richness)
allrichness
data_m <- subset(data_m, Kingdoms == "Animalia")
dim(data_m)
richness <- function(rank) {
length(spetaxalist(data_m, rank))
}
ranks <- c("Phylum", "Class", "Order", "Family", "Genus")
allrichness <- unlist(lapply(ranks, richness))
allrichness
forx <- seq(1:length(allrichness), by  = 1)
forx <- seq(1:length(allrichness))
plot(allrichness ~ forx)
plot(allrichness ~ forx, ylab = "species richness")
plot(allrichness ~ forx, ylab = "species richness", xlab = "")
plot(allrichness ~ forx, ylab = "species richness", xlab = "", pch = 2)
plot(allrichness ~ forx, ylab = "species richness", xlab = "", pch = 19)
plot(log(allrichness) ~ forx, ylab = "species richness", xlab = "", pch = 19)
plot(log(allrichness) ~ forx, ylab = "log10(species richness)", xlab = "", pch = 19)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19)
model <- lm(log(log(allrichness)) ~ forx)
summary(model)
abline(model, col = "red")
abline(model, col = "red", ltw = 3)
abline(model, col = "red", lwd = 3)
abline(model, col = "red", lwd = 3, lty = 2)
allrichness <- unlist(lapply(ranks, richness))
forx <- seq(1:length(allrichness))
model <- lm(log(log(allrichness)) ~ forx)
summary(model)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19)
abline(model, col = "red", lwd = 3, lty = 2)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(0, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(1, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
title("Higher taxonomy")
text(1, 1.2, "Phylum")
text(1.2, 1.2, "Phylum")
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(1, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
title("Higher taxonomy")
text(1.2, 1.2, "Phylum")
text(1.2, 1.3, "Phylum", cex = 0.8)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(1, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
title("Higher taxonomy")
text(1.2, 1.3, "Phylum", cex = 0.8)
text(2.2, 1.6, "Class", cex = 0.8)
topn("Animalia", "Phylum", 10)
text(3.2, 1.8, "Order", cex = 0.8)
?spectaxalist(data_m, "Genus")
?spetaxalist(data_m, "Genus")
?spetaxalist(data_m, "Kingdoms")
spetaxalist(data_m, "Kingdoms")
spetaxalist(data_m, "Animalia")
spetaxalist(data_m, "Arthropoda")
spetaxalist(data_m, "Kintgdoms")
spetaxalist(data_m, "Genera")
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(1, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
title("Higher taxonomy")
text(1.2, 1.3, "Phylum", cex = 0.8)
text(2.2, 1.6, "Class", cex = 0.8)
text(3.2, 1.8, "Order", cex = 0.8)
text(4.2, 2.0, "Family", cex = 0.8)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(1, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
title("Higher taxonomy")
text(1.2, 1.3, "Phylum", cex = 0.8)
text(2.2, 1.6, "Class", cex = 0.8)
text(3.2, 1.8, "Order", cex = 0.8)
text(4.2, 1.9, "Family", cex = 0.8)
text(4.7, 2.0, "Genus", cex = 0.8)
plot(log(log(allrichness)) ~ forx, ylab = "log10(log10(species richness))", xlab = "", pch = 19, ylim = c(1, 2.5))
abline(model, col = "red", lwd = 3, lty = 2)
title("Higher taxonomy")
text(1.2, 1.3, "Phylum", cex = 0.8)
text(2.2, 1.6, "Class", cex = 0.8)
text(3.2, 1.8, "Order", cex = 0.8)
text(4.2, 1.9, "Family", cex = 0.8)
text(4.9, 2.0, "Genus", cex = 0.8)
log(100)
log10(100)
log10(1000)
log10(10000000000)
log10(log10(10000000000))
selectInput("taxa", lable = "Taxa:", choices = c("Arthropoda", "Mollusca"), selected = "Mollusca")
library(shiny)
selectInput("taxa", lable = "Taxa:", choices = c("Arthropoda", "Mollusca"), selected = "Mollusca")
selectInput("taxa", label = "Taxa:", choices = c("Arthropoda", "Mollusca"), selected = "Mollusca")
