<<<<<<< HEAD
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
=======
return(res)
} else if(method == "Asymtopic_Regression_Model") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = AR.3()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
}
}#, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
#example
taxamodel_cor(taxa = "Animalia", rank = "Genus", method = "logistic")
taxamodel_cor <- function(taxa, rank, method) {
tryCatch({
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
N_obs <- taxa_dt$'taxacount'
times <- as.numeric(taxa_dt$year)
if(method == "logistic") {
ryegrass.m1 <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
corr_coef <- cor(N_obs, predict(ryegrass.m1))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Michaelis-Menten") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = MM.2()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Asymtopic_Regression_Model") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = AR.3()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
}
}, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))})
}
taxamodel_cor(taxa = "Animalia", rank = "Genus", method = "logistic")
taxamodel_cor(taxa = "Animalia", rank = "Genus", method = "Asymtopic_Regression_Model")
shiny::runApp('biotaxa-app')
runApp('biotaxa-app')
runApp('biotaxa-app')
devtools::check()
devtools::document()
devtools::check()
devtools::install()
rm(list = ls())
taxamodel("Animalia", 'Genus', "logistic")
library(biotaxa)
taxamodel("Animalia", 'Genus', "logistic")
taxamodel_cor("Animalia", "Species", "Asymtopic_Regression_Model")
taxamodel_cor("Animalia", "Species", "logistic")
taxamodel_cor("Animalia", "Species", "Michaelis-Menten")
taxamodel_cor("Animalia", "Species", "Asymtopic_Regression_Model")
devtools::build()
devtools::install()
getwd()
taxamodel
library(biotaxa)
taxamodel
taxamodel("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
Asymtopic_Regression_Model
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_cor("Animalia", "Genus", "Michaelis-Menten")
taxamodel_cor("Animalia", "Genus", "logistic")
taxamodel_cor <- function(taxa, rank, method) {
tryCatch({
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
N_obs <- taxa_dt$'taxacount'
times <- as.numeric(taxa_dt$year)
if(method == "logistic") {
ryegrass.m1 <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
corr_coef <- cor(N_obs, predict(ryegrass.m1))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Michaelis-Menten") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = MM.2()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Asymtopic_Regression_Model") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = AR.3()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
}
}, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))})
}
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
rm(list = ls())
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_cor("Animalia", "Genus", "logistic")
taxamodel_cor <- function(taxa, rank, method) {
tryCatch({
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
>>>>>>> 6afcb5d33c1a2590bf5350db6a645d38c1b8ece5
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
<<<<<<< HEAD
max_found <- max(taxa_dt[,2])
N_obs <- taxa_dt$'taxacount'
times <- c(taxa_dt$year)
model <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
maxi = round(coef(summary(model))[3], digits = 0)
rest = maxi - max_found
#rest = maxi = max_obs
phase1 = "A logistic regression model predicts there exists"
phase2 = "of"
phase3 = "in this region."
phase4 = "have been found and"
phase5 = "remain to be discovered."
phase6 = "remains to be discovered."
if(rest > 1) {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, rest, phase5, sep = " ")
} else {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, "none", phase6, sep = " ")
}
return(complete_phase)
}#, error = function(e) {list(taxa = taxa, rank = rankabel, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
taxamodel("Chordata", "Class", "logistic")
taxa_rich("Chordata", "Order")
taxamodel("Chordata", "Order", "logistic")
taxamodel("Chordata", "Class", "logistic")
taxa_rich("Chordata", "Family")
taxa_rich("Chordata", "Family")
taxa_rich("Chordata", "Genus")
taxa_rich("Chordata", "Order")
taxa_rich <- function(taxa, rank) {
=======
N_obs <- taxa_dt$'taxacount'
times <- as.numeric(taxa_dt$year)
if(method == "logistic") {
ryegrass.m1 <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
corr_coef <- cor(N_obs, predict(ryegrass.m1))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Michaelis-Menten") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = MM.2()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Asymtopic_Regression_Model") {
model.drm <- drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = AR.3())
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
}
}, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))})
}
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
rm(list = ls())
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_cor("Animalia", "Genus", "logistic")
devtools::document()
devtools::build()
library(biotaxa)
devtools::document()
devtools::build()
library(biotaxa)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
library(biotaxa)
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
devtools::load_all(".")
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_cor
taxamodel
library(biotaxa)
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_cor
taxamodel_cor
devtools::document()
devtools::load_all()
devtools::check()
source('~/Documents/R packages/biotaxa/R/taxamodel_cor.R')
devtools::document()
devtools::check()
devtools::install()
rm(list = ls())
devtools::install()
taxamodel_cor
getwd()
library(biotaxa)
taxamodel_cor
taxamodel
library(biotaxa)
taxamodel_cor
install.packages("biotaxa")
install.packages("biotaxa")
library(biotaxa)
taxamodel_cor
devtools::build()
library(biotaxa)
taxamodel_cor
library(biotaxa)
taxamodel_cor
knitr::opts_chunk$set(echo = TRUE)
#example
taxamodel_cor(taxa = "Animalia", rank = "Genus", method = "logistic")
taxamodel_cor <- function(taxa, rank, method) {
tryCatch({
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
N_obs <- taxa_dt$'taxacount'
times <- as.numeric(taxa_dt$year)
if(method == "logistic") {
ryegrass.m1 <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
corr_coef <- cor(N_obs, predict(ryegrass.m1))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Michaelis-Menten") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = MM.2()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Asymtopic_Regression_Model") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = AR.3()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
}
}#, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
#example
taxamodel_cor(taxa = "Animalia", rank = "Genus", method = "logistic")
knitr::opts_chunk$set(echo = TRUE)
#load the dataset of interest
#check the dimension of the dataset
library(biotaxa)
dim(data_m)
#The column names of the dataset should include year and all required taxonomic hierarchical levels. Nevertheless, they do not need to be in the same order as that of the example dataset.
colnames(data_m)
library(data.table)
library(dplyr)
library(ggplot2)
taxaaccum <- function(taxa, rank) {
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if (rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if (rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if (rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if (rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if (rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if (rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
minx <- min(as.vector(taxa_dt$year))
maxx <- max(as.vector(taxa_dt$year))
ylab = paste("Number of", ranklabel, sep = " ")
p <- ggplot(taxa_dt, aes(x = year, y = taxacount, colour = "#FF9999")) + geom_point(colour = "cornflowerblue")
p <- p + labs(x = "Year", y = ylab) + ggtitle(taxa) + scale_x_discrete(breaks = c(seq(minx, maxx, 25))) + theme(legend.position = "none", axis.text.x = element_text(angle = 60, hjust = 1), axis.text.y = element_text(angle = 60, hjust = 1), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)))
p
}
library(data.table)
library(drc)
taxamodel <- function(taxa, rank, method) {
>>>>>>> 6afcb5d33c1a2590bf5350db6a645d38c1b8ece5
tryCatch({
data_m <- subset(data_m, Kingdoms != "" & Phyla != "" & Classes != "" & Orders != "" & Families != "" & Genera != "" & AphiaIDs != "")
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
max_found <- max(taxa_dt[,2])
N_obs <- taxa_dt$'taxacount'
times <- c(taxa_dt$year)
model <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
maxi = round(coef(summary(model))[3], digits = 0)
rest = maxi - max_found
#rest = maxi = max_obs
phase1 = "A logistic regression model predicts there exists"
phase2 = "of"
phase3 = "in this region."
phase4 = "have been found and"
phase5 = "remain to be discovered."
phase6 = "remains to be discovered."
if(rest > 1) {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, rest, phase5, sep = " ")
} else if (rest < 1) {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, "none", phase6, sep = " ")
} else {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, rest, phase6, sep = " ")
}
return(complete_phase)
}#, error = function(e) {list(taxa = taxa, rank = rankabel, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
<<<<<<< HEAD
taxa_rich("Chordata", "Order")
devtools::document()
devtools::check()
library(biotaxa)
library(biotaxa)
taxa_rich("Chordata", "Genus")
taxa_rich("Chordata", "Species")
devtools::document()
devtools::check()
library(robis)
library(rgbif)
library(biotaxa)
taxa_rich("Chordata", "Species")
taxa_rich("Chordata", "Order")
taxa_rich("Salpidae", "Genus")
taxa_rich("Salpidae", "Species")
taxa_rich("Coccinellidae", "Species")
taxa_rich("Formicidae", "Species")
taxa_rich("Hymenoptera", "Species")
taxamodel("Hymenoptera", "Species", "logistic")
taxamodel("Hymenoptera", "Genus", "logistic")
taxa_rich("Hymenoptera", "Genus")
taxa_rich("Coleoptera", "Genus")
taxa_rich("Coleoptera", "Species")
taxamodel("Coleoptera", "Genus")
taxamodel("Coleoptera", "Genus", "logistic")
taxamodel("Coleoptera", "Species", "logistic")
taxamodel("Hymenooptera", "Species", "logistic")
taxamodel("Hymenoptera", "Species", "logistic")
taxamodel("Hymenoptera", "Genus", "logistic")
taxamodel("Leoptera", "Genus", "logistic")
taxamodel("Homoptera", "Genus", "logistic")
taxamodel("Hemiptera", "Genus", "logistic")
taxamodel("Hemiptera", "Species", "logistic")
taxa_rich("Hemipgera", "Species", "logistic")
taxa_rich("Hemipgera", "Species")
taxa_rich("Hemipgera", "species")
taxa_rich("Hemiptera", "Species")
taxa_rich("Hemiptera", "Genus")
taxa_rich("Hemiptera", "Family")
taxa_rich("Lepidoptera", "Family")
taxa_rich("Lepidoptera", "Genus")
taxa_rich("Lepidoptera", "Species")
taxa_rich("Lepidoptera", "Species")
taxa_rich("Odonata", "Species")
spetaxalist("Lepidoptera", "Species")
spetaxalist()
?spetaxalist
spetaxalist(data_m, "Order")
taxa_rich("Thuidales", "Genus")
taxa_rich("Thuidales", "Species")
taxa_rich("Spionida", "Species")
taxamodel("Spionida", "Species", "logistic")
taxa_rich("Spionida", "Genus")
taxa_rich("Spionida", "Family")
taxa_rich("Spionida", "Order")
taxa_rich("Salpida", "Order")
taxa_rich("Salpida", "Family")
taxa_rich("Salpida", "Genus")
taxa_rich("Salpida", "Species")
taxa_rich("Tryblidiida", "Species")
taxamodel("Tryblidiida", "Species")
taxamodel("Tryblidiida", "Species", "logistic")
alltaxalist(data_m)
data_m %>% filter("Salpida")
head(alltaxalist(data_m = data_m = ))
head(alltaxalist(data_m = data_m))
data_m %>% filter(taxa == "Salpidae")
data_m %>% filter(taxa = "Salpidae")
data_m %>% filter(taxa = "Salpida")
data_m %>% filter("Salpida")
data_m %>% filter(taxa = "Salpidae")
data_m %>% filter(taxa == "Salpidae")
colnames(data_m)
ls <- alltaxalist(data_m)
colnames(ls)
ls %>% filter(taxa == "Salpida")
ls %>% filter(taxa == "Salpida")$rank
ls %>% filter(taxa == "Salpida")
taxa_query <- function(taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa)
ls$rank
}
taxa_query("Salpida")
alltaxalist(data_m) %>% filter("Salpida")
alltaxalist(data_m) %>% filter(taxa == "Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
ls$rank
}
taxa_query("Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
ls$rank[1]
}
taxa_query("Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
as.character(ls$rank[1])
}
taxa_query("Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank[1])
paste(taxa, "is a", out_rank, ".", sep = " ")
}
taxa_query("Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank[1])
paste(taxa, "is a", out_rank, ".", sep = " ")
}
taxa_query("Salpida")
alltaxalist(data_m) %>% filter(taxa == in_taxa)
alltaxalist(data_m) %>% filter(taxa == "Salpida")
l <- alltaxalist(data_m) %>% filter(taxa == "Salpida")
l
l$rank
as.character(ls$rank)
as.character(ls$rank)[1]
as.character(l$rank)[1]
as.character(l$rank)
paste("", "is a", out_rank, ".", sep = " ")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank)
paste(in_taxa, "is a", out_rank, ".", sep = " ")
}
taxa_query("Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank)
paste(in_taxa, " is a ", out_rank,"", sep = "")
}
taxa_query("Salpida")
taxa_query("Hymenoptera")
taxa_query("Formicidae")
taxa_query("Mollusca")
taxa_query("Animalia")
letters("P")
letter("p")
letter("P")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank)
paste(in_taxa, " is a ", out_rank,".", sep = "")
}
taxa_query("Animalia")
taxa_query("Bacteria")
taxa_query("Arthropoda")
taxa_query("Lepidoptera")
taxa_query("Collembola")
taxa_rich("Collembola", "Genus")
taxa_rich("Collembola", "Species")
taxamodel("Collembola", "Species", "logistic")
#' @return the predicted value of taxa richness (of given rank) based on logistic regression model
#' @import data.table
#' @importFrom stats getInitial
#' @import drc
#' @examples
#' \dontrun{
#' taxa_rich("Animalia", "Phylum")
#' }
#' @export
#'
taxa_rich <- function(taxa, rank) {
tryCatch({
data_m <- subset(data_m, Kingdoms != "" & Phyla != "" & Classes != "" & Orders != "" & Families != "" & Genera != "" & AphiaIDs != "")
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
max_found <- max(taxa_dt[,2])
N_obs <- taxa_dt$'taxacount'
times <- c(taxa_dt$year)
model <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
maxi = round(coef(summary(model))[3], digits = 0)
rest = maxi - max_found
#rest = maxi = max_obs
phase1 = "A logistic regression model predicts there exists"
phase2 = "of"
phase3 = "in this region."
phase4 = "have been found and"
phase5 = "remain to be discovered."
phase6 = "remains to be discovered."
if(rest > 1) {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, rest, phase5, sep = " ")
} else if (rest < 1) {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, "none", phase6, sep = " ")
} else {
complete_phase = paste(phase1, maxi, ranklabel, phase2, taxa, phase3, max_found, ranklabel, phase4, rest, phase6, sep = " ")
}
return(complete_phase)
}#, error = function(e) {list(taxa = taxa, rank = rankabel, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
taxa_rich("Collembola", "Species")
alltaxalist(data_m )
taxa_rich("Coccosphaerales","Species")
taxa_rich("Coccosphaerales","Species")
taxa_rich("Collembola","Species")
taxa_rich("Collembola","Species")
taxa_rich("Coleoptera","Species")
taxa_query("Coleoptera")
devtools::document()
devtools::check()
devtools::build()
strsplit("test", "a")
?strsplit
sub("test")
sub("test", "t")
"test"[1]
"test"[2]
length(split("test"))
?split
x <- "test"
strplit(x, "")
strsplit(x, "")
strsplit(x, " ")
strsplit(x, "")
strsplit(x, "")[[1]][2]
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank)
if((strsplit(in_taxa, ""))[[1]][1] == "O") {
paste(in_taxa, " is an ", out_rank,".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank,".", sep = "")
}
}
taxa_query("Animalia")
taxa_query("Mollusca")
taxa_query("Hymenoptera")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- as.character(ls$rank)
if((strsplit(out_rank, ""))[[1]][1] == "O") {
paste(in_taxa, " is an ", out_rank,".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank,".", sep = "")
}
}
taxa_query("Hymenoptera")
devtools::document()
taxa_query("Salpida")
taxa_query("Salpidae")
taxa_query("Plantae")
taxa_rich("Plantae", "Species")
taxa_rich("Bacteria", "Species")
taxa_rich("Bacteria", "Genus")
taxa_rich("Bacteria", "Family")
taxa_rich("Bacteria", "Order")
taxa_rich("Bacteria", "Class")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "O") {
paste(in_taxa, " is an ", out_rank, ".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank, ".", sep = "")
}
}
taxa_query("Salpida")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "O") {
paste(in_taxa, " is an ", out_rank, ".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank, ".", sep = "")
}
}
taxa_query("123")
taxa_query(c("Salpida", "Coleoptera"))
lapply(c("Salpida", "Coleoptera"), taxa_query)
unlist(lapply(c("Salpida", "Coleoptera"), taxa_query))
writeLines(lapply(c("Salpida", "Coleoptera"), taxa_query))
lapply(c("Salpida", "Coleoptera"), taxa_query)
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "o") {
paste(in_taxa, " is an ", out_rank, ".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank, ".", sep = "")
}
}
lapply(c("Salpida", "Coleoptera"), taxa_query)
as.factor(unlist(lapply(c("Salpida", "Coleoptera"), taxa_query)))
as.vector(unlist(lapply(c("Salpida", "Coleoptera"), taxa_query)))
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "o") {
paste(in_taxa, " is an ", out_rank, ".", sep = "")
} else {
writeLines(paste(in_taxa, " is a ", out_rank, ".", sep = ""))
}
}
lapply(c("Salpida", "Animalia"), taxa_query)
writeLines("Animalia")
taxa_query("Animalia")
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "o") {
writeLines(paste(in_taxa, " is an ", out_rank, ".", sep = ""))
} else {
writeLines(paste(in_taxa, " is a ", out_rank, ".", sep = ""))
}
}
lapply(c("Animalia", "Arthropoda"), taxa_query)
data_m %>% filter("Salpida") %select("Phylum")
data_m %>% filter("Salpida") %>% select("Phylum")
data_m %>% filter("Salpida") %>% select("Phyla")
data_m %>% filter("Salpida")
head(data_m)
data_m %>% filter(Order == "Sapida")
data_m %>% filter(Orders == "Sapida")
data_m %>% filter(Orders == "Salpida")
data_m %>% filter(Orders == "Salpida") %>% select("Phylum", "Class")
data_m %>% filter(Orders == "Salpida") %>% select("Phylum", "Classes")
data_m %>% filter(Orders == "Salpida") %>% select("Phyla", "Classes")
colnames(data_m)
data_m %>% filter(Orders == "Salpida")
data_m %>% filter(Orders == "Salpida") %>% select("Phyla")
data_m %>% filter(Orders == "Salpida") %>% select(Phyla)
data_m %>% filter(Orders == "Salpida") %>% select(AphiaIDs)
data_m %>% filter(Orders == "Salpida") %>% select(AphiaIDs, Phyla)
data_m %>% filter(Orders == "Salpida")
data_m %>% filter(Orders == "Salpida") %>% select(Families)
library(dplyr)
data_m %>% filter(Orders == "Salpida") %>% select(Families)
dm <- data_m %>% filter(Orders == "Salpida")
dm %>% select(Phyla)
dm %>% group_by(Orders)
dm %>% group_by(Families)
dm %>% group_by(Families) %>% select(year)
dm %>% group_by(Families) %>% summarize(sum = n())
dm %>% group_by(Genera) %>% summarize(sum = n())
dim(dm)
dm %>% group_by("Kingdom") %>% summarize_each()
summarize_each()
dplyr::summarize_each()
?summarize
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "o") {
paste(in_taxa, " is an ", out_rank, ".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank, ".", sep = "")
}
}
taxa_query("Salpidae")
taxa_query("Salpida")
taxa_query("Hymenoptera")
alltaxalist(data_m) %>% filter(taxa == "Salpida") %>% summarise(nspecies = length(unique(Species)))
alltaxalist(data_m) %>% filter(taxa == "Salpida") %>% summarise(nspecies = length(unique(Families)))
alltaxalist(data_m) %>% filter(taxa == "Salpida")
data_m %>% filter(taxa == "Salpida") %>% select(Phyla)
data_m %>% filter(Orders == "Salpida") %>% select(Phyla)
data_m %>% filter(Orders == "Salpida")
?select
data_m %>% filter(Orders == "Salpida") %>% select(year)
data_m %>% filter(Orders == "Salpida") %>% select(data_m, year)
iris <- as_tibble(iris)
iris
select(iris, Species)
library(dplyr)
iris <- as_tibble(iris)
select(iris, Species)
rm(list = ls())
library(dplyr)
iris <- as_tibble(iris)
select(iris, Species)
taxa_query <- function(in_taxa) {
ls <- alltaxalist(data_m) %>% filter(taxa == in_taxa)
out_rank <- tolower(as.character(ls$rank))
if((strsplit(out_rank, ""))[[1]][1] == "o") {
paste(in_taxa, " is an ", out_rank, ".", sep = "")
} else {
paste(in_taxa, " is a ", out_rank, ".", sep = "")
}
}
taxa_query("Salpida")
=======
#example
taxamodel("Animalia", "Phylum", "logistic")
taxamodel_cor <- function(taxa, rank, method) {
tryCatch({
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
N_obs <- taxa_dt$'taxacount'
times <- as.numeric(taxa_dt$year)
if(method == "logistic") {
ryegrass.m1 <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4()))
corr_coef <- cor(N_obs, predict(ryegrass.m1))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Michaelis-Menten") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = MM.2()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
} else if(method == "Asymtopic_Regression_Model") {
model.drm <- suppressWarnings(drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = AR.3()))
corr_coef <- cor(N_obs, predict(model.drm))
res <- list(taxa=taxa, rank=rank, method=method, corr_coef=corr_coef)
return(res)
}
}#, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
#example
taxamodel_cor(taxa = "Animalia", rank = "Genus", method = "logistic")
library(biotaxa)
taxamodel_cor("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamol_model_cor
taxamodel_cor
rm(list=ls())
getwd()
library(biotaxa)
taxamodel_cor("Animalia", "Species", "Asymtopic_Regression_Model")
taxamodel_cor
install()
getwd()
library(biotaxa)
rm(list = ls())
library(biotaxa)
taxamodel_cor
devtools::github("hhsieh/biotaxa_RPackage")
library(devtools)
devtools::github("hhsieh/biotaxa_RPackage")
devtools::install_github("hhsieh/biotaxa_Rpackage")
library(biotaxa_RPackage)
getwd()
taxamodel_cor
getwd()
cd ..
devtools::document()
devtools::build()
library(biotaxa)
taxamodel_cor
taxamodel
taxamodel_FIXPLOT
taxamodel()
taxamodel
devtools::document()
devtools::check()
devtools::install()
taxamodel_cor
taxamodel_corr
taxamodel_corr("Animalia", "Genus", "Asymptopic_Regression_Model")
taxamodel_corr("Animalia", "Genus", "Asymtopic_Regression_Model")
taxamodel_corr("Animalia", "Genus", "logistic")
>>>>>>> 6afcb5d33c1a2590bf5350db6a645d38c1b8ece5
