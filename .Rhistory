dd$collectionDate
dd$collectionDate <- as.character(dd$collectionDate)
dd$collectionDate
unlist(mapply(copytheright, dd$collectionDate, row.names(dd)))
knitr::opts_chunk$set(echo = TRUE)
library(gdata)
setwd("/Users/hhsieh/Documents/Mio/Mexico Data/2009/Originals")
list.files()
dd <- read.xls("REVICION GENERAL July 09..xls", sheet = 1)
head(dd)
dim(dd)
colnames(dd) <- c("collectionDate", "collectionPlate", "treeSpecies", "areaName", "antNestClusterGroup", "coffeeBushNumber", "timeOfFirstPhoridAttack", "totalPhoridAttacks", "maleBeetleCount", "femaleBeetleCount", "unidentifiedAdultBeetleCount", "firstInstarBeetleLarvaeCount", "secondInstarBeetleLarvaeCount", "thirdInstarBeetleLarvaeCount", "fourthInstarBeetleLarvaeCount", "pupaBeetleCount","healthyBorers", "boredBorers", "withOrWithoutAzteca")
dd$year <- "2009"
dd$month <- "June-July"
dd <- dd[-c(1,2), -c(20:26)] #delete the first two rows and columns 20-26 which do not contain information
head(dd)
tail(dd)
dim(dd)
dd[177,]
dd <- dd[-c(177), ]#delete row 177 which does not contain needed information
#added one variable to group data later
seri <- seq(1:56)
group  <- function(seri) {
rep(paste("Irlanda09_", seri, sep = ""), 4)
}
groups <- lapply(seri, group)
groups <- unlist(groups)
groups
dd$group <- groups
head(dd)
dim(dd)
dd$collecionDate <- as.character(dd$collectionDate)
dd$collectionDate
copytheright <- function(copyfrom, i) {
if(as.numeric(i)%%4 == 0 | as.numeric(i)%%4 == 1 | as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i)%/%4])
} else {
return(copyfrom[as.numeric(i)])
}
}
dd$collectionDate <- as.character(dd$collectionDate)
dd$collectionDate
unlist(mapply(copytheright, dd$collectionDate, row.names(dd)))
#convert factor data to vector data
library(dplyr)
dd$femaleBeetleCount <- as.numeric(levels(dd$femaleBeetleCount)[as.integer(dd$femaleBeetleCount)])
head(dd$femaleBeetleCount)
dd$maleBeetleCount <- as.numeric(levels(dd$maleBeetleCount)[as.integer(dd$maleBeetleCount)])
head(dd$maleBeetleCount)
dd$unidentifiedAdultBeetleCount <- as.numeric(levels(dd$unidentifiedAdultBeetleCount)[as.integer(dd$unidentifiedAdultBeetleCount)])
head(dd$unidentifiedAdultBeetleCount)
dd$firstInstarBeetleLarvaeCount <- as.numeric(levels(dd$firstInstarBeetleLarvaeCount)[as.integer(dd$firstInstarBeetleLarvaeCount)])
head(dd$firstInstarBeetleLarvaeCount)
dd$secondInstarBeetleLarvaeCount <- as.numeric(levels(dd$secondInstarBeetleLarvaeCount)[as.integer(dd$secondInstarBeetleLarvaeCount)])
head(dd$secondInstarBeetleLarvaeCount)
dd$thirdInstarBeetleLarvaeCount <- as.numeric(levels(dd$thirdInstarBeetleLarvaeCount)[as.integer(dd$thirdInstarBeetleLarvaeCount)])
head(dd$thirdInstarBeetleLarvaeCount)
dd$fourthInstarBeetleLarvaeCount <- as.numeric(levels(dd$fourthInstarBeetleLarvaeCount)[as.integer(dd$fourthInstarBeetleLarvaeCount)])
head(dd$fourthInstarBeetleLarvaeCount)
dd$pupaBeetleCount <- as.numeric(levels(dd$pupaBeetleCount)[as.integer(dd$pupaBeetleCount)])
head(dd$pupaBeetleCount)
setwd("/Users/hhsieh/Documents/Mio/Mexico Data/2009/Originals")
dd2 <- read.xls("REVICION GENERAL July 09..xls", sheet = 2)
head(dd2)
tail(dd2)
dd2[,2]
dim(dd2)
colnames(dd2) <- c("collectionDate", "collectionPlate", "treeSpecies", "areaName", "antNestClusterGroup", "coffeeBushNumber", "scaleLevel0", "scaleLevel50", "percentageHeloFungus", "lowScaleZeroFungus", "lowScaleLevel1Fungus", "lowScaleLevel2Fungus", "lowScaleLevel3Fungus", "lowScaleLevel4Fungus", "mediumScaleZeroFungus", "mediumScaleLevel1Fungus", "mediumScaleLevel2Fungus", "mediumScaleLevel3Fungus", "mediumScaleLevel4Fungus", "highScaleZeroFungus", "highScaleLevel1Fungus", "highScaleLevel2Fungus", "highScaleLevel3Fungus", "highScaleLevel4Fungus", "superScaleZeroFungus", "superScaleLevel1Fungus", "superScaleLevel2Fungus", "superScaleLevel3Fungus", "superScaleLevel4Fungus")
dd2$year <- "2009"
dd2$month <- "June-July"
head(dd2)
dim(dd2)
dd2 <- dd2[-c(1:2) , -c(30:34)]
head(dd2)
tail(dd2)
dim(dd2)
dd2[177,]
dd2 <- dd2[-c(177), ]
dim(dd2)
dd2$group <- groups
head(dd2)
levels(dd2$scaleLevel0)
class(dd2$scaleLevel0)
which(dd2$scaleLevel0 == 0)
zeroscales <- as.numeric(levels(dd2$scaleLevel0)[as.integer(dd2$scaleLevel0)])
zeroscales
fiftyscales <- as.numeric(levels(dd2$scaleLevel50)[as.integer(dd2$scaleLevel50)])
fiftyscales
percentageHeloFungi <- as.character(dd2$percentageHeloFungus)
fungus <- function(percentageHeloFungus) {
as.numeric(strsplit(as.character(percentageHeloFungus), "%")[[1]][1]) / 100
}
percentageHeloFungi <- unlist(lapply(percentageHeloFungi, fungus))
percentageHeloFungi
ptgHeloFungus <- function(percentageHeloFungus) {
if(is.na(percentageHeloFungus) == TRUE) {
0
} else {
percentageHeloFungus
}
}
ptgHeloFungus_ <- unlist(lapply(percentageHeloFungi, ptgHeloFungus))
ptgHeloFungus_
lowscale <- function(scaleLevel0, scaleLevel50, ptgHeloFungus_) {
if(is.na(scaleLevel0) == TRUE & is.na(scaleLevel50) == TRUE & is.na(ptgHeloFungus_) == FALSE | is.na(ptgHeloFungus_) == TRUE) {
zeroscale = 0
fiftyscale = 0
(zeroscale + fiftyscale) * (1 - ptgHeloFungus_)
} else if(is.na(scaleLevel0) == FALSE & is.na(scaleLevel50) == TRUE & is.na(ptgHeloFungus_) == FALSE | is.na(ptgHeloFungus_) == TRUE) {
zeroscale = 10
fiftyscale = 0
(zeroscale + fiftyscale) * (1 - ptgHeloFungus_)
} else if(is.na(scaleLevel0) == TRUE & is.na(scaleLevel50) == FALSE & is.na(ptgHeloFungus_) == FALSE | is.na(ptgHeloFungus_) == TRUE) {
zeroscale = 0
fiftyscale = 35
(zeroscale + fiftyscale) * (1 - ptgHeloFungus_)
} else {
0
}
}
lowscales <- unlist(mapply(lowscale, zeroscales, fiftyscales, ptgHeloFungus_))
lowscales
ddtransformer <- function(li) {
li <- as.numeric(levels(li))[as.integer(li)]
if(is.na(li) == TRUE) {
0
} else {
li
}
}
onestep <- function(li) {
end <- unlist(lapply(li, ddtransformer))
return(end)
}
for(i in 10:29) {
dd2[,i] <- onestep(dd2[,i])
dd2[,i]
}
dd$collectionDate <- as.character(dd$collectionDate)
dd$collectionDate
unlist(mapply(copytheright, dd$collectionDate, row.names(dd)))
dd$collectionDate
row.names(dd)
as.numeric(223%/%4)
copytheright <- function(copyfrom, i) {
if(as.numeric(i)%%4 == 0 | as.numeric(i)%%4 == 1 | as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i)%/%4])
} else {
return(copyfrom[as.numeric(i)])
}
}
dd$collectionDate <- as.character(dd$collectionDate)
dd$collectionDate
unlist(mapply(copytheright, dd$collectionDate, row.names(dd)))
copytheright <- function(copyfrom, i) {
if(as.numeric(i)%%4 == 0 | as.numeric(i)%%4 == 1 | as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i)%/%4])
} else {
return(copyfrom[as.numeric(i)])
}
}
dd$collectionDate <- as.character(dd$collectionDate)
dd$collectionDate
unlist(mapply(copytheright, dd$collectionDate, row.names(dd)))
copytheright <- function(copyfrom, i) {
if(as.numeric(i)%%4 == 1 | as.numeric(i)%%4 == 2 | as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i)%/%4])
} else {
return(copyfrom[as.numeric(i)])
}
}
dd$collectionDate <- as.character(dd$collectionDate)
dd$collectionDate
unlist(mapply(copytheright, dd$collectionDate, row.names(dd)))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collectionDate, row.names(dd)))
collection <- as.character(dd$collectionDate)[1:10]
collection
unlist(mapply(copytheright, collectionDate, row.names(dd)))
collection <- as.character(dd$collectionDate)[1:10]
collection
unlist(mapply(copytheright, collection, row.names(dd)))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(dd)))
collection <- as.character(dd$collectionDate[1:10])
collection
#unlist(mapply(copytheright, collection, row.names(dd)))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(dd)))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(collection)))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, c(1:10))
)
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, c(1:10)))
mapply(copytheright, c("12", "32", "33", "22"), c(1:4))
unlist(mapply(copytheright, c("12", "32", "33", "22"), c(1:4)))
mapply(copytheright, c("12", "32", "33", "22"), c(1:4))
mapply(copytheright, c(1, 32, 33, 22), c(1:4))
copytheright <- function(copyfrom, i) {
if(as.numeric(i)%%4 == 1) {
return(copyfrom[as.numeric(i - 1)])
} else if(as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i - 2)])
} else if(as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i - 3)])
}
else {
return(copyfrom[as.numeric(i)])
}
}
mapply(copytheright, c(1, 32, 33, 22), c(1:4))
mapply(copytheright, c(1, 32, 33, 22), c(1:4))
collection
copytheright <- function(copyfrom) {
for(i in 1:length(copypfrom)) {
if(as.numeric(i)%%4 == 1) {
return(copyfrom[as.numeric(i - 1)])
} else if(as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i - 2)])
} else if(as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i - 3)])
}
else {
return(copyfrom[as.numeric(i)])
}
}
}
mapply(copytheright, collection)
copytheright <- function(copyfrom) {
for(i in 1:length(copypfrom)) {
if(as.numeric(i)%%4 == 1) {
return(copyfrom[as.numeric(i - 1)])
} else if(as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i - 2)])
} else if(as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i - 3)])
}
else {
return(copyfrom[as.numeric(i)])
}
}
}
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, c(1:10)))
collection
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(lapply(collection, copytheright))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(lapply(collection, copytheright))
lapply(collection, copytheright)
collection
lapply(collection, copyfrom)
lapply(collection, copytheright)
copytheright(231)
copytheright(c(231, 22), 1)
copytheright(c(231, 22))
copytheright(22)
copytheright("22")
copytheright("213")
copytheright(c("213"))
#convert factor data to vector data
library(dplyr)
dd$femaleBeetleCount <- as.numeric(levels(dd$femaleBeetleCount)[as.integer(dd$femaleBeetleCount)])
head(dd$femaleBeetleCount)
dd$maleBeetleCount <- as.numeric(levels(dd$maleBeetleCount)[as.integer(dd$maleBeetleCount)])
head(dd$maleBeetleCount)
dd$unidentifiedAdultBeetleCount <- as.numeric(levels(dd$unidentifiedAdultBeetleCount)[as.integer(dd$unidentifiedAdultBeetleCount)])
head(dd$unidentifiedAdultBeetleCount)
dd$firstInstarBeetleLarvaeCount <- as.numeric(levels(dd$firstInstarBeetleLarvaeCount)[as.integer(dd$firstInstarBeetleLarvaeCount)])
head(dd$firstInstarBeetleLarvaeCount)
dd$secondInstarBeetleLarvaeCount <- as.numeric(levels(dd$secondInstarBeetleLarvaeCount)[as.integer(dd$secondInstarBeetleLarvaeCount)])
head(dd$secondInstarBeetleLarvaeCount)
dd$thirdInstarBeetleLarvaeCount <- as.numeric(levels(dd$thirdInstarBeetleLarvaeCount)[as.integer(dd$thirdInstarBeetleLarvaeCount)])
head(dd$thirdInstarBeetleLarvaeCount)
dd$fourthInstarBeetleLarvaeCount <- as.numeric(levels(dd$fourthInstarBeetleLarvaeCount)[as.integer(dd$fourthInstarBeetleLarvaeCount)])
head(dd$fourthInstarBeetleLarvaeCount)
dd$pupaBeetleCount <- as.numeric(levels(dd$pupaBeetleCount)[as.integer(dd$pupaBeetleCount)])
head(dd$pupaBeetleCount)
copytheright <- function(copyfrom, i) {
for(i in 1:length(copypfrom)) {
if(as.numeric(i)%%4 == 1) {
return(copyfrom[as.numeric(i - 1)])
} else if(as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i - 2)])
} else if(as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i - 3)])
}
else {
return(copyfrom[as.numeric(i)])
}
}
}
copytheright <- function(copyfrom, i) {
for(i in 1:length(copypfrom)) {
if(as.numeric(i)%%4 == 1) {
return(copyfrom[as.numeric(i - 1)])
} else if(as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i - 2)])
} else if(as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i - 3)])
}
else {
return(copyfrom[as.numeric(i)])
}
}
}
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(lapply(collection, copytheright))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, c(1:10)))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(dd[1:10]))
)
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(dd[1:10])))
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(dd[1:10])))
copytheright <- function(copyfrom, i) {
for(i in 1:length(copypfrom)) {
if(as.numeric(i)%%4 == 1) {
return(copyfrom[as.numeric(i - 1)])
} else if(as.numeric(i)%%4 == 2) {
return(copyfrom[as.numeric(i - 2)])
} else if(as.numeric(i)%%4 == 3) {
return(copyfrom[as.numeric(i - 3)])
}
else {
return(copyfrom[as.numeric(i)])
}
}
}
collection <- as.character(dd$collectionDate[1:10])
collection
unlist(mapply(copytheright, collection, row.names(dd[1:10])))
setwd("/Users/hhsieh/Documents/ANTABIS/IPT/Data Cleaning/Krillbase")
list.files()
dd <- read.csv("merged_krills_slashremoved.csv", header = T, sep = ",")
dim(dd)
colnames(dd)
head(dd)
##remove un-necessary fields that would cause confusions
dd$ScientificName_accepted <- NULL
dd$ScientificName <- NULL
dd$AphiaID <- NULL
dd$TSN <- NULL
dd$AphiaID_accepted <- NULL
dd$Authority_accepted <- NULL
dim(dd)
##rename some columns and remove resulting redundency
dd$scientificNameAuthorship <- dd$Authority
dd$Authority <- NULL
dim(dd)
sdY <- function(year, dayFrom1stOct) {
if(year %% 4 == 0 & year %% 400 !=0) {
274 + dayFrom1stOct
} else {
273 + dayFrom1stOct
}
}
dayFrom1stOcts <- dd$dayFrom1stOct
year <- dd$year
sDs <- unlist(mapply(sdY, year, dayFrom1stOcts))
sDs
dd$startDayOfYear <- sDs
dd$startDayOfYear
dd$dayFrom1stOct <- NULL
##check the original file
orin <- read.csv("krillbase-4.csv", sep = ";", header = T)
head(orin)
#see if values in 'Station' are all unique
length(unique(orin$Station)) #14543
dim(orin)[1] #14543
dim(dd)[1]/2 #14543
eventIDs_k <- paste(orin$Station, "k", sep = "_")
eventIDs_s <- paste(orin$Station, "s", sep = "_")
eventIDs <- c(eventIDs_k, eventIDs_s)
length(eventIDs)
dd$eventID <- eventIDs
#collect No ofnets from orin and makes samplingEffort column in dd
Nnets <- orin$No.ofnets
length(Nnets)
Nnets <- rep(Nnets, 2)
Nnets
#change the column name "dateAccuracy" to "evenetRemarks"
dd$eventRemarks <- dd$dateAccuracy
dd$eventRemarks
dd$dateAccuracy <- NULL
dd$dateAccuracy
#change the column name "Citation" to "taxonRemarks"
dd$taxonRemarks <- dd$Citation
head(dd$taxonRemarks)
dd$Citation <- NULL
dd$taxonstatus <- dd$Taxon.status
dd$taxonR <- paste("citation: ", dd$taxonRemarks, ";", "taxon status ", dd$taxonstatus, sep = "")
head(dd$taxonR)
dd$taxonRemarks <- dd$taxonR
head(dd$taxonRemarks)
dd$taxonR <- NULL
##sampleSizeUnit
dd$sampleSizeUnit <- "cubic meter"
head(dd$sampleSizeUnit)
#organismQuantity
dd$organismQuantity <- dd$organismDensityValue
head(dd$organismQuantity)
#organismQuantityUnit
dd$organismQuantityUnit <- "under 1 square meter"
head(dd$organismQuantityUnit)
dd$organismDensityUnit <- NULL
dd$organismDensityValue <- NULL
##collect dynamicProperties
##Nofnets, polarFront, dateAccuracy, day/night method, mdaynight, dataCaveat
##
orin_Nofnets <- orin$No.ofnets
orin_pF <- orin$N.or.Sof.PolarFront
orin_dateaccuracy <- orin$Dateaccuracy
orin_daynightmethod <- orin$Day.nightmethod
orin_datacaveat <- orin$Datacaveats
dynamicproperties <- paste("No. of nets: ", orin_Nofnets, "; ", "polar front: ", orin_pF, "; ", "date accuracy: ", orin_dateaccuracy, "; ", "day night method: ", orin_daynightmethod, "; ", "data caveat: ", orin_datacaveat, sep = "")
dd$dynamicProperties <- dynamicproperties
dd$isBrackish <- NULL
dd$isMarine <- NULL
dd$isTerrestrial <- NULL
dd$isFresh <- NULL
orin$station
orin$No.ofstations
orin$Station
length(unique(orin$Station))
dim(dd)[1]/2
#station as occurrenceID
dd$occurrenceID <- orin$Station
write.csv(dd, "approaching_finals_krillbase.csv", row.names = FALSE)
##delete more columns
dd$polarFront <- NULL
head(orin$Climatologicaltemperature)
colnames(orin)
orin_waterhDepthMeanWithin10km <- orin$Waterdepthmean.within.10km.
orin_waterDepthRangeWithin10km <- orin$Waterdepthrange.within.10km.
head(orin$Volumefiltered..m3.)
dd$waterFilteredUnit
orin_volumeFilteredValuem3 <- orin$Volumefiltered..m3.
dynamicproperties <- paste("No. of nets: ", orin_Nofnets, "; ", "polar front: ", orin_pF, "; ", "date accuracy: ", orin_dateaccuracy, "; ", "day night method: ", orin_daynightmethod, "; ", "data caveat: ", orin_datacaveat, "temperature: ", orin_temperature, "waterDepthMeanWithin10km", orin_waterhDepthMeanWithin10km, "waterDepthRangeWithin10km", orin_waterDepthRangeWithin10km, "volumeFilteredValuem3", orin$Volumefiltered..m3., sep = "")
orin_temperature <- orin$Climatologicaltemperature
orin_waterhDepthMeanWithin10km <- orin$Waterdepthmean.within.10km.
orin_waterDepthRangeWithin10km <- orin$Waterdepthrange.within.10km.
orin_volumeFilteredValuem3 <- orin$Volumefiltered..m3.
dd$volumeFilteredValue <- NULL
##delete more columns
dd$polarFront <- NULL
dd$temperatureUnit <- NULL
dd$SdOfOrganismSurveyMean <- NULL
dd$standardisedOrganismUnder1m2 <- NULL
dd$waterDepthMeanWithin10km <- NULL
dd$waterDepthRangeWithin10km <- NULL
dd$volumeFilteredUnit <- NULL
dd$volumeFilteredValue <- NULL
write.csv(dd, "approaching_finals_krillbase.csv", row.names = FALSE)
write.csv(dd, "finals_krillbase.csv", row.names = FALSE)
dd$recordType <- NULL
write.csv(dd, "finals_krillbase.csv", row.names = FALSE)
head(dd$scientificName)
dd$occurrenceID[dim(dd)[1]/2 + 1 : dim(dd)[1]] <- paste(orin$Station, "_s", sep = "")
#station as occurrenceID
dd$occurrenceID[1:dim(dd)[1]/2] <- paste(orin$Station, "_k", sep = "")
dd$occurrenceID[dim(dd)[1]/2 + 1 : dim(dd)[1]] <- paste(orin$Station, "_s", sep = "")
length(dd$occurrenceID)
dim(dd)[1]/2
#station as occurrenceID
dd$occurrenceID[1:dim(dd)[1]/2] <- paste(orin$Station, "_k", sep = "")
#station as occurrenceID
occ_krills <- paste(orin$Station, "_k", sep = "")
occ_salps <- paste(orin$Staion, "_s", sep = "")
dd$occurrenceID <- c(occ_krills, occ_sapls)
dd$occurrenceID <- c(occ_krills, occ_salps)
#station as occurrenceID
occ_krills <- paste(orin$Station, "_k", sep = "")
occ_salps <- paste(orin$Staion, "_s", sep = "")
dd$occurrenceID <- c(occ_krills, occ_salps)
dim(dd)
length(c(occ_krills, occ_salps))
length(occ_krills)
#station as occurrenceID
occ_krills <- paste(orin$Station, "_k", sep = "")
occ_salps <- paste(orin$Staion, "_s", sep = "")
length(occ_krills)
length(occ_salps)
occ_salps <- paste(orin$Staion, "_s", sep = "")
length(occ_salps)
length(orin$Station)
occ_salps <- paste(orin$Station, "_s", sep = "")
dd$occurrenceID <- c(occ_krills, occ_salps)
write.csv(dd, "finals_krillbase.csv", row.names = FALSE)
dd$basisOfRecord
which(is.na(dd$basisOfRecord) == TRUE)
