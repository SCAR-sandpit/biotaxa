}
ani.options(oopt)
library(MetaLanSim)
install.packages("MetaLanSim")
library(MetaLandSim)
install.packages("MetaLandSim")
library(MetaLandSim)
data(rland)
rland$number.patches
rland
data(cabrera)
cabrera
cluster.graph(rl)
rl1 <- addpoints(rl=rland, nr=10)
rl1$number.patches
cluster.graph(rl)
rl
cluster.graph(rland)
data(rland)
cluster.graph(rl=rland)
cluster.id(rl)
cluster.id(rland)
data(simulatedifm)
simulatedifm
simulatedifm
library("coda")
simulatedifm)
simulatedifm
niter=2000
nsite=100
nyear=10
nthin=1
nburnin=1000
nmissing = sum(is.na(z.sim.20))
nmissing
MetaLandSim.GUI()
taxamodel("Animalia", "Genus", "logistic")
m <- matrix(c(0,0,0,0,1,0,0,0,0),nrow=3,ncol=3)
pMove <- 0.4
m
mW = cbind( rep(0,nrow(m)), m[,-ncol(m)] )
mW
rep(n, nrow(m))
rep(0, nrow(m))
m[, -ncol(m)]
m
m[,-3]
mN = rbind( rep(0,ncol(m)), m[-nrow(m),] )
mE = cbind( m[,-1], rep(0,nrow(m)) )
mS = rbind( m[-1,], rep(0,ncol(m)) )
mN
mE
mS
mArrivers <- pMove*(mN + mE + mS + mW)/4
mArrivers
mStayers <- (1-pMove)*m
mStayerss
mStayers
require(devtools)
install_github('AndySouth/rtsetse')
shiny::runGitHub('AndySouth/shinytse', subdir='shinytse7')
install.packages("shinythemes")
library(shinythemes)
shiny::runGitHub('AndySouth/shinytse', subdir='shinytse7')
update.pcakges("rlang")
update.packages("rlang")
shiny::runGitHub('AndySouth/shinytse', subdir='shinytse7')
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(plotrix)
?image
image(m)
sample(c(0,1), 100, replace = TRUE, prob = 0.3)
sample(c(0,1), 10)
sample(1)
sample(1)
sample(1)
sample(c(0,1))
sample(c(0,1))
sample(c(0,1))
?sample
sample(c(0,2))
sample(c(0,2),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
P <- matrix(rep(sample(c(0,1), 1)), 100, nrow = 10)
p
P
P <- matrix(rep(sample(c(0,1), 1)), ncol = 10, nrow = 10)
P
image(P)
P <- matrix(rep(sample(c(0,1), 100)), ncol = 10, nrow = 10)
P
rep(sample(c(0,1)),1)
rep(sample(c(0,1),1))
rep(sample(c(0,1),10))
rep(sample(c(0,1),1))
rep(sample(c(0,1),1),10)
rep(sample(c(0,1),1),2)
rep(sample(c(0,1),1),2)
rep(sample(c(0,1),1),2)
rep(sample(c(0,1),1),2)
rep(sample(c(0,1),1),2)
rep(sample(c(0,1),1),2)
lapply(c(1,1,1,1), sample(c(0,1),1))
lapply(sample(c(0,1),1), c(1,1,1,1))
x <- c(1,1,1,1)
lapply(x, sample(c(0,1),x))
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
lapply(x = c(1,1,1,1), sample(c(0,1),x))
?lapply(list, function)
?lapply
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(c(0,1),1)
sample(0:1, 10, replace = TRUE)
#generate a random presence/absence
occup <- sample(0:1, 100, replace = TRUE)
P <- matrix(occup, ncol = 10, nrow = 10)
P
image(P)
#generate a random presence/absence
occup <- sample(0:1, 100, replace = TRUE, prob = 0.3)
binom(0,1)
?rbinom
rbinom(100, 1, 0.3)
sum(rbinom(100, 1, 0.3))
rbinom(100, 1, 0.3)
sum(rbinom(100, 1, 0.3))
rbinom(100, 1, 0.3)
sum(rbinom(100, 1, 0.3))
#generate a random presence/absence
occup <- rbinom(n = 100, size = 1, prob = 0.3)
P <- matrix(occup, ncol = 10, nrow = 10)
P
image(P)
#generate a random presence/absence
occup <- rbinom(n = 100, size = 1, prob = 0.2) #prob = colonization probability
P <- matrix(occup, ncol = 10, nrow = 10)
P
image(P)
?image\
?image
impage(P, colour = "rainbow")
image(P, colour = "rainbow")
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1, 1, 0.2)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
rbinom(1,1,0.1)
extinct <- function(occupation) {
if(occupation == 1) {
extinct = rbinom(1, 1, prob = 0.1)
} else {
extinct = 0
}
}
lapply(c(0,0,1,1,1), extinct)
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
extinct <- function(occupation) {
if(occupation == 1) {
extinct = rbinom(1, 1, prob = 0.1)
occupationalStatute = occupation - extinct
} else {
extinct = 0
occupationalStaute = 0
}
}
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
unlist(lapply(c(0,0,1,1,1), extinct))
meta.inter=function(tf,cl,ln,fi,i,pe){
paisag=array(0,dim=c(ln,cl,tf))
paisag[,,1]=matrix(sample(c(1,0),cl*ln,prob=c(fi,1-fi), replace=T),ln,cl)
resultado=numeric()
for(t in 2:tf){
pc=i*sum(paisag[,,t-1])/(cl*ln)
paisag[,,t][paisag[,,(t-1)]==1]<-sample(c(0,1),sum(paisag[,,t-1]),replace=T,prob=c(pe,1-pe))
paisag[,,t][paisag[,,(t-1)]==0]<-sample(c(0,1),cl*ln-sum(paisag[,,t-1]),replace=T,prob=c(1-pc,pc))
resultado[t-1]=sum(paisag[,,t])/(cl*ln)
}
F=1-(pe/i)
plot(1:tf,c(fi,resultado),type="l",xlab="Tempo",ylab="Fração de manchas ocupadas",
ylim=c(0,1),main=paste("Colonização Interna","\n cl=",cl," ln=",ln," fi=",fi," i=",i," pe=",pe),font.lab=2,lwd=2)
abline(h=F,col=2,lwd=2,lty=2)
return(paisag)
}
meta.inter(tf=100,cl=10,ln=10,fi=.1,i=1,pe=0.5)
sim.int1 <- meta.inter(20,10,10,1, 0.4,0.2)
anima2=function(dados){
tf=dim(dados)[3]
for(i in 1:tf){
image(dados[,,i], main=("Ocupação de manchas"),col=c("white","red"),bty="n",xaxt='n',yaxt='n')
grid(dim(dados)[1],dim(dados)[2])
Sys.sleep(.2)
}
}
anima2(dados=sim.int1)
anima2(dados=sim.int1)
install.packages ("RcmdrPlugin.EcoVirtual")
library("RcmdrPlugin.EcoVirtual")
update.packages("rlang")
??rlang
library("RcmdrPlugin.EcoVirtual")
install.packages("RcmdrMisc")
install.packages("RcmdrMisc")
library("RcmdrMisc")
update.package(checkBuilt = TRUE)
update.packages(checkBuilt = TRUE)
install.packages ("RcmdrPlugin.EcoVirtual", dependencies = TRUE)
library ("RcmdrPlugin.EcoVirtual")
install.packages (c ("Rcmdr", "EcoVirtual"))
library ("RcmdrPlugin.EcoVirtual")
install.packages("RcmdrMisc")
library(RcmdrMisc)
install.packages("rlang", type = "source")
install.packages("rlang", type = "source")
library ("RcmdrPlugin.EcoVirtual")
library(rlang)
library ("RcmdrPlugin.EcoVirtual")
update.packages("rlang", source = TRUE)
library ("RcmdrPlugin.EcoVirtual")
update.packages("RcmdrMisc")
library ("RcmdrPlugin.EcoVirtual")
library ("RcmdrPlugin.EcoVirtual")
library ("RcmdrPlugin.EcoVirtual")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library ("RcmdrPlugin.EcoVirtual")
library(rlang)
?rlang::lifecycle
a <- sym("foo")
library(rlang)
install.packages("rlang")
install.packages("rlang")
rm = list(ls())
library(rlang)
a <- sym("foo")
a
expr(!!a > b)
expr(a > b)
expr(!!a > b)
expr((!!a)(bar, baz))
op <- sym(">")
exp((!!op)(bar, baz))
expr((!!op)(bar, baz))
library("RcmdrPlugin.EcoVirtual")
library(rlang)
install.packages("RcmdrMisc")
library(RcmdrMisc)
library("RcmdrPlugin.EcoVirtual")
install.packages("RcmdrMisc", dependencies = TRUE)
library(RcmdrMisc)
library("RcmdrPlugin.EcoVirtual")
remotes::install_github(r-lib/rlang)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library(rlang)
library(rlang)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library(rlang)
install.packages("rlang")
library(rlang)
library("RcmdrPlugin.EcoVirtual")
update.packages("rlang")
update.packages("RcmdrMisc")
library("RcmdrPlugin.EcoVirtual")
install_github("hadley/rlang")
library(devtools)
install_github("hadley/rlang")
rm(list = ls())
library(rlang)
library("RcmdrPlugin.EcoVirtual")
library("RcmdrPlugin.EcoVirtual")
library("RcmdrPlugin.EcoVirtual")
library("RcmdrPlugin.EcoVirtual")
install.packages("binomen")
library(binomen)
library(magick)
frink <- image_read("https://jeroen.github.io/images/frink.png")
image_trim(frink)
image_scale(frink, "200x200")
image_flip(frink)
image_rotate(frink, 45) ## <-- result of this is shown
image_negate(frink)
frink %>%
image_background("green") %>%
image_flatten() %>%
image_border("red", "10x10")
image_oilpaint(frink)
image_implode(frink)
image_blur(frink)
image_edge(frink)
devtools::install_github("ropensci/antiword")
library(antiword)
text <- antiword("https://jeroen.github.io/files/UDHR-english.doc")
cat(text)
text
cat(text)
devtools::install_github("ropensci/unrtf")
?cat
cat("iteration = ", iter <- iter + 1, "\n")
iter <- stats::rpois(1, lambda = 10)
iter
cat("iteration = ", iter <- iter + 1, "\n")
library(unrtf)
text <- unrtf("https://jeroen.github.io/files/sample.rtf", format = "text")
html <- unrtf("https://jeroen.github.io/files/sample.rtf", format = "html")
cat(text)
devtools::install_github("ropensci/taxview")
library(taxview)
x <- system.file("examples/plant_spp.csv", package = "taxview")
x
?data.table::fread
x <- Numeric()
.numeric <- Numeric()
.numeric <- as.numeric()
.numeric
class(.numeric)
method(.numeric)
pairedTTest <- function(){
initializeDialog(title=gettextRcmdr("Paired t-Test"))
.numeric <- Numeric()
xBox <- variableListBox(top, .numeric,
title=gettextRcmdr("First variable (pick one)"))
yBox <- variableListBox(top, .numeric,
title=gettextRcmdr("Second variable (pick one)"))
onOK <- function(){
x <- getSelection(xBox)
y <- getSelection(yBox)
if (length(x) == 0 | length(y) == 0){
errorCondition(recall=pairedTTest,
message=gettextRcmdr("You must select two variables."))
return()
}
if (x == y){
errorCondition(recall=pairedTTest,
message=gettextRcmdr("Variables must be different."))
return()
}
alternative <- as.character(tclvalue(alternativeVariable))
level <- tclvalue(confidenceLevel)
closeDialog()
.activeDataSet <- ActiveDataSet()
doItAndPrint(paste("t.test(", .activeDataSet, "$", x, ", ",
.activeDataSet, "$", y,
", alternative=’", alternative, "’, conf.level=", level,
", paired=TRUE)", sep=""))
tkfocus(CommanderWindow())
}
OKCancelHelp(helpSubject="t.test")
radioButtons(top, name="alternative",
buttons=c("twosided", "less", "greater"),
values=c("two.sided", "less", "greater"),
labels=gettextRcmdr(c("Two-sided", "Difference < 0",
"Difference > 0")),
title=gettextRcmdr("Alternative Hypothesis"))
confidenceFrame <- tkframe(top)
confidenceLevel <- tclVar(".95")
confidenceField <- tkentry(confidenceFrame, width="6",
textvariable=confidenceLevel)
tkgrid(getFrame(xBox), getFrame(yBox), sticky="nw")
tkgrid(tklabel(confidenceFrame,
text=gettextRcmdr("Confidence Level"), fg="blue"))
tkgrid(confidenceField, sticky="w")
tkgrid(alternativeFrame, confidenceFrame, sticky="nw")
tkgrid(buttonsFrame, columnspan=2, sticky="w")
dialogSuffix(rows=3, columns=2)
}
pairdTTest()
pairedTTest
install.packages("taxizedb")
library("taxizedb")
library("dplyr")
x <- db_download_itis()
db_load_itis(x)
x <- db_download_itis()
db_load_itis(x)
x <- db_download_itis()
db_load_itis(x)
x <- db_download_itis()
db_load_itis(x)
?db_load_itis
x <- db_download_itis()
x <- db_download_itis()
db_load_itis(x, user = "hhsieh")
x <- db_download_itis()
db_load_itis(x, user = "hhsieh", pwd = "Poai471939!")
library(biotaxa)
taxamodel("Animalia", "Genus", "logistic")
taxamodel_FIXPLOT("Animalia", "Genus", "logistic")
taxamodel <- function(taxa, rank, method) {
tryCatch({
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxacount")
minx <- min(as.vector(taxa_dt$year))
maxx <- max(as.vector(taxa_dt$year))
ylab = paste("Number of", ranklabel, sep = " ")
p <- ggplot(taxa_dt, aes(x = year, y = taxacount, colour = "#FF9999", group = 1
)) + geom_point(colour = "cornflowerblue")
p <- p + labs(x = "Year", y = ylab) + ggtitle(taxa) + scale_x_discrete(breaks = c(seq(minx, maxx, 25))) + theme(legend.position = "none", axis.text.x = element_text(angle = 60, hjust = 1), axis.text.y = element_text(angle = 60, hjust = 1), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)))
if(method == "Michaelis-Menten") {
# refer to this page https://stackoverflow.com/questions/27547548/solving-error-message-step-halving-factor-reduced-below-minimum-in-nls-step-a
N_obs <- taxa_dt$'taxacount'
times <- c(taxa_dt$year)
model.drm <- drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = MM.2())
newtimes <- times
preds <- suppressWarnings(predict(model.drm, times = newtimes, interval = "prediction", level = 0.95))
LW = preds[,2]
UP = preds[,3]
corr_coef <- cor(N_obs, predict(model.drm))
p <- p + geom_line(data = data.frame(preds, taxa_dt$year), aes(taxa_dt$year, Prediction), colour = "#FF9999")
p <- p + geom_ribbon(aes(ymin = LW, ymax = UP), linetype = 2, alpha = 0.1)
p
} else if (method == "logistic") {
N_obs <- taxa_dt$'taxacount'
times <- c(taxa_dt$year)
ryegrass.m1 <- drm(N_obs ~ times, data = data.frame(N_obs = N_obs, times = times), fct = L.4())
pred <- suppressWarnings(as.data.frame(predict(
ryegrass.m1,
newdata = data.frame(N_obs = N_obs, times = times),
interval = "prediction", level = 0.95)));
pred$times <- times;
LW = pred[,2]
UP = pred[,3]
p <- p + geom_line(data = data.frame(pred, taxa_dt$year), aes(taxa_dt$year, Prediction), colour = "#FF9999")
p <- p + geom_ribbon(aes(ymin = LW, ymax = UP), linetype = 2, alpha = 0.1)
p
}
}#, error = function(e) {list(taxa = taxa, rank = rank, method = method, corr_coef = cat("model fails to converge", "\n"))}
)
}
taxamodel("Animalia", "Genus", "logistic")
library(data.table)
library(dplyr)
library(ggplot2)
taxamodel("Animalia", "Genus", "logistic")
library(drc)
taxamodel("Animalia", "Genus", "logistic")
library(stats)
taxamodel("Animalia", "Genus", "logistic")
devtools::load_all()
devtools::check()
devtools::build()
library(biotaxa)
devtools::check()
devtools::build()
devtools::check()
