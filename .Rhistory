#maybe use ggplot2
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxa count")
plot(taxa_dt$year, taxa_dt$`taxa count`, xlab = "Year", ylab = paste("Number of", ranklabel, sep = " "), ylim = c(0, max(taxa_dt$"taxa count")*1.35))
title(taxa)
N_obs <- taxa_dt$'taxa count'
times <- as.numeric(taxa_dt$year)
SS<-getInitial(N_obs~SSlogis(times,alpha,xmid,scale),data=data.frame(N_obs=N_obs,times=times))
K_start <- SS["alpha"]
R_start <- 1/SS["scale"]
N0_start <- SS["alpha"]/(exp(SS["xmid"]/SS["scale"])) + 1
log_formula<-formula(N_obs ~ K * N0 * exp(R * times) / (K + N0 * (exp(R * times) - 1)))
m<-nls(log_formula,start = list(K = K_start, R = R_start, N0 = N0_start))
corr_coef_ss <- cor(N_obs,predict(m))
lines(times,predict(m),col="red",lty=2,lwd=2)
n = length(times)
## add model predictions
K = summary(m)$coefficient[1]
R = summary(m)$coefficient[2]
N0 = summary(m)$coefficient[3]
## add variances - first, find standard errors
K_se = summary(m)$coefficients[4]
R_se = summary(m)$coefficients[5]
N0_se = summary(m)$coefficients[6]
## compute standard deviations
K_sd = K_se * sqrt(n)
R_sd = R_se * sqrt(n)
N0_sd = N0_se * sqrt(n)
# compute upper bounds of model prediction
UP = (K + K_sd) * (N0 + N0_sd) * exp((R + R_sd)*times)/((K + K_sd)+(N0 + N0_sd)*(exp((R + R_sd)*times)-1))
lines(times, UP, col = 'red', lty = "dashed")
LW = (K - K_sd) * (N0 - N0_sd) * exp((R - R_sd)*times)/((K - K_sd)+(N0 - N0_sd)*(exp((R - R_sd)*times)-1))
lines(times, LW, col ='red', lty = 'dashed')
## add a M-M model
MM <- getInitial(N_obs~SSmicmen(times, Vm, K),data=data.frame(N_obs=N_obs,times=times))
Vm_start <- MM["Vm"]
K_start <- MM["K"]
#model <- nls(N_obs ~ SSmicmen(N_obs, Vm, K), data = dd)
model <- nls(N_obs ~ Vm * times / (K + times), start = list(Vm = Vm_start, K = K_start))
#return(summary(model))
corr_coef_mm <- cor(N_obs, predict(model))
#return(corr_coef)
lines(times,predict(model),col="blue",lty=2,lwd=2)
n = length(times)
## add model predictions
a = summary(model)$coefficient[1]
b = summary(model)$coefficient[2]
## add variances - first, find standard errors
a_se = summary(model)$coefficients[3]
b_se = summary(model)$coefficients[4]
## compute standard deviations
a_sd = a_se * sqrt(n)
b_sd = b_se * sqrt(n)
# compute upper bounds of model prediction
UP = (a + a_sd) * times / (b - b_sd + times)
lines(times, UP, col = 'blue', lty = "dashed")
LW = (a - a_sd) * times / (b + b_sd + times)
lines(times, LW, col ='blue', lty = 'dashed')
return(list('correlation coefficient of the logistic model' = corr_coef_ss, 'correlation coefficient of the Machaelis-Menten model' = corr_coef_mm))
}
taxamodel("Animalia", "Phylum", "logistic")
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
data_m <- data.frame(data_s, year)
library(data.table)
data_m <- data.frame(data_s, year)
dd <- subset(data_m)[,c(16,19:24,44)]
dim(dd)
write.csv(dd, "/Users/hhsieh/Desktop/test.csv", row.names = FALSE)
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
dd <- subset(data_m)[,c(16,19:24,44)]
colnames(dd) <- c("AphiaIDs", "Kingdoms", "Phyla", "Classes", "Orders", "Families", "Genera", "year")
write.csv(dd, "test.csv", row.names = FALSE)
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
setwd("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/Three Bigs")
data <- read.csv("ThreeBigs_n_2.0.csv", sep = ",", header = T, row.names = NULL)
dim(data)
Authority_year <- function(Authority_accepted) {
regexp <- "[[:digit:]]+"
return(str_extract(Authority_accepted, regexp))
}
Authority <- as.character(data$Authority_accepted)
year <- unlist(lapply(Authority, Authority_year))
data <- data.frame(data, year)
data <- subset(data, year != "")
library(data.table)
data_m <- data.frame(data, year)
data <- read.csv("ThreeBigs_n_2.0.csv", sep = ",", header = T, row.names = NULL)
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
library(rmarkdown)
getwd()
list.files()
setwd("/Users/hhsieh/Documents/R packages/biotaxa")
getwd()
devtools::use_vignette("my-vignette")
devtools::usethis_vignette("my-vignette")
devtools::usethis_use_vignette("my-vignette")
usethis::use_vignette("my-vignette")
usethis::use_vignette("my-vignette")
runApp('~/Documents/ANTABIS/RASp/RAS species list/Shiny App')
library(robis)
install.packages("robis")
library(robis)
install.packages("robis")
uu <- "http://api.iobis.org/occurrence?year=2005&scientificname=Cetacea&limit=100"
uuJSON <- fromJSON(uu)
uuJSON
uu <- "http://api.iobis.org/occurrence?year=2005&scientificname=Cetacea"
uuJSON <- fromJSON(uu)
setwd("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/Unique OBIS species list")
data <- read.csv("unique_50S_OBIS_species.csv", header = T, sep = ",")
head(data)
occurrences <- read.csv("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/50S45S_OBIS_Points.csv", header = T, sep = ",")
head(occurrences)
setwd("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/Three Bigs")
data <- read.csv("ThreeBigs_n_2.0.csv", sep = ",", header = T, row.names = NULL)
data_s <- subset(data, Match.type != "")
data_s <- subset(data_s, Kingdom !="" & Kingdom != "P. Micheli ex Haller")
library(stringr)
Authority_year <- function(Authority_accepted) {
regexp <- "[[:digit:]]+"
return(str_extract(Authority_accepted, regexp))
}
Authority <- as.character(data_s$Authority_accepted)
year <- unlist(lapply(Authority, Authority_year))
data_m <- data.frame(data_s, year)
data_m <- subset(data_m, year!= "")
library(data.table)
data_m <- data.frame(data_s, year)
data_m <- subset(data_m, year!= "")[,c(16,19:24,44)]
colnames(data_m) <- c("AphiaIDs", "Kingdoms", "Phyla", "Classes", "Orders", "Families", "Genera", "year")
taxaaccum <- function(taxa, rank) {
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa |                 Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if (rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if (rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if (rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if (rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if (rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if (rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxa count")
plot(taxa_dt$year, taxa_dt$`taxa count`, xlab = "Year", ylab = paste("Number of", ranklabel, sep = " "))
title(taxa)
}
taxaaccum("Animalia", "Phylum")
taxamodel <- function(taxa, rank, method) {
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa |
Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxa count")
plot(taxa_dt$year, taxa_dt$`taxa count`, xlab = "Year", ylab = paste("Number of", ranklabel, sep = " "), ylim = c(0, max(taxa_dt$"taxa count")*1.35))
title(taxa)
if(method == "logistic") {
N_obs <- taxa_dt$'taxa count'
times <- as.numeric(taxa_dt$year)
SS<-getInitial(N_obs~SSlogis(times,alpha,xmid,scale),data=data.frame(N_obs=N_obs,times=times))
K_start <- SS["alpha"]
R_start <- 1/SS["scale"]
N0_start <- SS["alpha"]/(exp(SS["xmid"]/SS["scale"])) + 1
#return(summary(SS))
log_formula<-formula(N_obs ~ K * N0 * exp(R * times) / (K + N0 * (exp(R * times) - 1)))
m<-nls(log_formula,start = list(K = K_start, R = R_start, N0 = N0_start))
#estimated parameters
#summary(m)
corr_coef <- cor(N_obs,predict(m))
#return(corr_coef)
lines(times,predict(m),col="red",lty=2,lwd=2)
n = length(times)
## add model predictions
K = summary(m)$coefficient[1]
R = summary(m)$coefficient[2]
N0 = summary(m)$coefficient[3]
## add variances - first, find standard errors
K_se = summary(m)$coefficients[4]
R_se = summary(m)$coefficients[5]
N0_se = summary(m)$coefficients[6]
## compute standard deviations
K_sd = K_se * sqrt(n)
R_sd = R_se * sqrt(n)
N0_sd = N0_se * sqrt(n)
# compute upper bounds of model prediction
UP = (K + K_sd) * (N0 + N0_sd) * exp((R + R_sd)*times)/((K + K_sd)+(N0 + N0_sd)*(exp((R + R_sd)*times)-1))
lines(times, UP, col = 'red', lty = "dashed")
LW = (K - K_sd) * (N0 - N0_sd) * exp((R - R_sd)*times)/((K - K_sd)+(N0 - N0_sd)*(exp((R - R_sd)*times)-1))
lines(times, LW, col ='red', lty = 'dashed')
return('correlation coefficient' = corr_coef)
} else if(method == "Michaelis-Menten") {
# refer to this page https://stackoverflow.com/questions/27547548/solving-error-message-step-halving-factor-reduced-below-minimum-in-nls-step-a
N_obs <- taxa_dt$'taxa count'
times <- as.numeric(taxa_dt$year)
MM <- getInitial(N_obs~SSmicmen(times, Vm, K),data=data.frame(N_obs=N_obs,times=times))
Vm_start <- MM["Vm"]
K_start <- MM["K"]
#model <- nls(N_obs ~ SSmicmen(N_obs, Vm, K), data = dd)
model <- nls(N_obs ~ Vm * times / (K + times), start = list(Vm = Vm_start, K = K_start))
#return(summary(model))
corr_coef <- cor(N_obs, predict(model))
#return(corr_coef)
lines(times,predict(model),col="red",lty=2,lwd=2)
n = length(times)
## add model predictions
a = summary(model)$coefficient[1]
b = summary(model)$coefficient[2]
lines(times,predict(model),col="red",lty=2,lwd=2)
## add variances - first, find standard errors
a_se = summary(model)$coefficients[3]
b_se = summary(model)$coefficients[4]
## compute standard deviations
a_sd = a_se * sqrt(n)
b_sd = b_se * sqrt(n)
# compute upper bounds of model prediction
UP = (a + a_sd) * times / (b - b_sd + times)
lines(times, UP, col = 'red', lty = "dashed")
LW = (a - a_sd) * times / (b + b_sd + times)
lines(times, LW, col ='red', lty = 'dashed')
#return(summary(model))
return('correlation coefficient' = corr_coef)
}
}
taxamodel("Animalia", "Phylum", "logistic")
modelcomparison <- function(taxa, rank) {
#yield one plot with two prediction curves, respectively, based on the two models
#deliver correlation coefficients of the two models
#maybe use ggplot2
df <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
dt = as.data.table(unique(df))
setkey(dt, "year")
if(rank == "Phylum") {
dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]
ranklabel = "phyla"
} else if(rank == "Class") {
dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]
ranklabel = "classes"
} else if(rank == "Order") {
dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]
ranklabel = "orders"
} else if(rank == "Family") {
dt[, id := as.numeric(factor(Families, levels = unique(Families)))]
ranklabel = "families"
} else if(rank == "Genus") {
dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]
ranklabel = "genera"
} else if(rank == "Species") {
dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]
ranklabel = "species"
}
setkey(dt, "year", "id")
dt.out <- dt[J(unique(year)), mult = "last"]#[, Phylum := NULL]
dt.out[, id := cummax(id)]
numtaxa <- cummax(as.numeric(factor(dt$id)))
taxa_dt <- aggregate(numtaxa, list(year = dt$year), max )
colnames(taxa_dt) <- c("year", "taxa count")
plot(taxa_dt$year, taxa_dt$`taxa count`, xlab = "Year", ylab = paste("Number of", ranklabel, sep = " "), ylim = c(0, max(taxa_dt$"taxa count")*1.35))
title(taxa)
N_obs <- taxa_dt$'taxa count'
times <- as.numeric(taxa_dt$year)
SS<-getInitial(N_obs~SSlogis(times,alpha,xmid,scale),data=data.frame(N_obs=N_obs,times=times))
K_start <- SS["alpha"]
R_start <- 1/SS["scale"]
N0_start <- SS["alpha"]/(exp(SS["xmid"]/SS["scale"])) + 1
log_formula<-formula(N_obs ~ K * N0 * exp(R * times) / (K + N0 * (exp(R * times) - 1)))
m<-nls(log_formula,start = list(K = K_start, R = R_start, N0 = N0_start))
corr_coef_ss <- cor(N_obs,predict(m))
lines(times,predict(m),col="red",lty=2,lwd=2)
n = length(times)
## add model predictions
K = summary(m)$coefficient[1]
R = summary(m)$coefficient[2]
N0 = summary(m)$coefficient[3]
## add variances - first, find standard errors
K_se = summary(m)$coefficients[4]
R_se = summary(m)$coefficients[5]
N0_se = summary(m)$coefficients[6]
## compute standard deviations
K_sd = K_se * sqrt(n)
R_sd = R_se * sqrt(n)
N0_sd = N0_se * sqrt(n)
# compute upper bounds of model prediction
UP = (K + K_sd) * (N0 + N0_sd) * exp((R + R_sd)*times)/((K + K_sd)+(N0 + N0_sd)*(exp((R + R_sd)*times)-1))
lines(times, UP, col = 'red', lty = "dashed")
LW = (K - K_sd) * (N0 - N0_sd) * exp((R - R_sd)*times)/((K - K_sd)+(N0 - N0_sd)*(exp((R - R_sd)*times)-1))
lines(times, LW, col ='red', lty = 'dashed')
## add a M-M model
MM <- getInitial(N_obs~SSmicmen(times, Vm, K),data=data.frame(N_obs=N_obs,times=times))
Vm_start <- MM["Vm"]
K_start <- MM["K"]
#model <- nls(N_obs ~ SSmicmen(N_obs, Vm, K), data = dd)
model <- nls(N_obs ~ Vm * times / (K + times), start = list(Vm = Vm_start, K = K_start))
#return(summary(model))
corr_coef_mm <- cor(N_obs, predict(model))
#return(corr_coef)
lines(times,predict(model),col="blue",lty=2,lwd=2)
n = length(times)
## add model predictions
a = summary(model)$coefficient[1]
b = summary(model)$coefficient[2]
## add variances - first, find standard errors
a_se = summary(model)$coefficients[3]
b_se = summary(model)$coefficients[4]
## compute standard deviations
a_sd = a_se * sqrt(n)
b_sd = b_se * sqrt(n)
# compute upper bounds of model prediction
UP = (a + a_sd) * times / (b - b_sd + times)
lines(times, UP, col = 'blue', lty = "dashed")
LW = (a - a_sd) * times / (b + b_sd + times)
lines(times, LW, col ='blue', lty = 'dashed')
return(list('correlation coefficient of the logistic model' = corr_coef_ss, 'correlation coefficient of the Machaelis-Menten model' = corr_coef_mm))
}
modelcomparison("Animalia", "Phylum")
taxaprecision <- function(taxa) {
taxa <- subset(data, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
species_complete <- which(taxa$Species != "")
all_species <- dim(taxa)[[1]][1]
species_precision = length(species_complete) / all_species
return(species_precision)
}
taxaprecision("Animalia")
colnames(data_m)
taxaprecision <- function(taxa) {
taxa <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
species_complete <- which(taxa$Species != "")
all_species <- dim(taxa)[[1]][1]
species_precision = length(species_complete) / all_species
return(species_precision)
}
taxaprecision("Animalia")
taxaprecision("Planta")
taxaprecision("Plantae")
taxaprecision <- function(taxa) {
taxa <- subset(data_m, Kingdoms == taxa | Phyla == taxa | Classes == taxa | Orders == taxa | Families == taxa | Genera == taxa)
species_complete <- which(taxa$AphiaIDs != "")
all_species <- dim(taxa)[[1]][1]
species_precision = length(species_complete) / all_species
return(species_precision)
}
taxaprecision("Animalia")
setwd("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/Three Bigs")
data <- read.csv("ThreeBigs_n_2.0.csv", sep = ",", header = T, row.names = NULL)
colnames(data)
data_s <- subset(data_s, Kingdom !="" & Kingdom != "P. Micheli ex Haller")
library(stringr)
setwd("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/Three Bigs")
data <- read.csv("ThreeBigs_n_2.0.csv", sep = ",", header = T, row.names = NULL)
data_s <- subset(data_s, Kingdom !="" & Kingdom != "P. Micheli ex Haller")
library(stringr)
Authority_year <- function(Authority_accepted) {
regexp <- "[[:digit:]]+"
return(str_extract(Authority_accepted, regexp))
}
Authority <- as.character(data_s$Authority_accepted)
year <- unlist(lapply(Authority, Authority_year))
data_m <- data.frame(data_s, year)
data_m <- subset(data_m, year!= "")
data_m <- subset(data_m, year!= "")[,c(16,19:24,44)]
colnames(data_m) <- c("AphiaIDs", "Kingdoms", "Phyla", "Classes", "Orders", "Families", "Genera", "year")
which(data_m$AphiaIDs == "")
which(data_m$AphiaIDs == " ")
which(data_m$AphiaIDs != "")
dim(data_m)
data_s <- subset(data, Kingdom !="" & Kingdom != "P. Micheli ex Haller")
library(stringr)
Authority_year <- function(Authority_accepted) {
regexp <- "[[:digit:]]+"
return(str_extract(Authority_accepted, regexp))
}
Authority <- as.character(data_s$Authority_accepted)
year <- unlist(lapply(Authority, Authority_year))
data_m <- data.frame(data_s, year)
data_m <- subset(data_m, year!= "")
library(data.table)
data_m <- subset(data_m, year!= "")[,c(16,19:24,44)]
colnames(data_m) <- c("AphiaIDs", "Kingdoms", "Phyla", "Classes", "Orders", "Families", "Genera", "year")
which(data_m$AphiaIDs == "")
which(data_m$AphiaIDs == " ")
which(data_m$AphiaIDs == " ")
dim(data_s)
data_m <- data.frame(data_s, year)
dim(data_m)
data_m <- subset(data_m, year!= "")[,c(16,19:24,44)]
dim(data_m)
data_m <- data.frame(data_s, year)
which(data_m$AphidIDs == "")
which(data_m$AphidIDs == " ")
which(data_m$AphidIDs == "NA")
which(data_m$AphiaIDs == "NA")
which(data_m$AphiaIDs == "")
which(data_m$AphiaIDs == " ")
data_s <- subset(data, Kingdom !="" & Kingdom != "P. Micheli ex Haller")
which(data_s$AphiaIDs == "")
which(data_s$AphiaIDs == " ")
which(data_s$AphiaIDs != "")
which(data_s$AphiaIDs != "")
levels(data_s$AphiaIDs)
colnames(data_s$AphiaID)
colnames(data_s$AphiaIDs)
colnames(data_s$AphiaID)
colnames(data_s)
data_m$AphiaID
which(data_m$AphiaID != ")"
)
which(data_m$AphiaID != "")
dim(data_m)
dim(data)
which(data$AphiaID != "")
dim(which(data$AphiaID != ""))
length(which(data$AphiaID != ""))
length(which(data$AphiaID == ""))
data <- read.csv("/Users/hhsieh/Documents/ANTABIS/RASp/RAS species list/Three Bigs/data_m.csv")
taxaimprecisionranking <- function(taxa, rank) {
dd <- subset(data, Kingdoms == taxa | Classes == taxa | Orders == taxa
| Families == taxa | Genera == taxa#,
#Classes == rank | Orders == rank | Families == rank | Genera == rank
)
#return(head(dd))
#return(dim(dd))
species_complete <- dd[c(which(dd$AphiaIDs != "")), ]
#return(species_complete)
#return(head(species_complete))
#head(species_complete)
#colnames(dd) <- c("higher", "lower")
#colnames
#taxa %>% group_by(lower) %>% summarise(length(lower))
}
dataimprecisionranking("Animalia", "Phylum")
dataimprecisionranking("Animalia", "Phyla")
taxaimprecisionranking("Animalia", "Phylum")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?getInitial
