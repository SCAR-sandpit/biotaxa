{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n  viewData <- reactive({\n    inFile <- input$file1\n    if(is.null(inFile))\n      return(NULL)\n    df <- read.csv(inFile$datapath, header = input$header)\n  })\n\n  modelfit <- reactive({\n    inFile <- input$file1\n    if(is.null(inFile))\n      return(NULL)\n    df <- read.csv(inFile$datapath, header = input$header)\n    df <- subset(df, Kingdoms == input$taxa | Phyla == input$taxa | Classes == input$taxa | Orders == input$taxa\n      | Families == input$taxa | Genera == input$taxa)\n    dt = as.data.table(unique(df))\n    setkey(dt, \"year\")\n    if (input$rank == \"Phylum\" | input$rank == \"phylum\") {\n      dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]\n    } else if (input$rank == \"Class\" | input$rank == \"class\") {\n      dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]\n    } else if (input$rank == \"Order\" | input$rank == \"order\") {\n      dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]\n    } else if (input$rank == \"Family\" | input$rank == \"family\") {\n      dt[, id := as.numeric(factor(Families, levels = unique(Families)))]\n    } else if (input$rank == \"Genus\" | input$rank == \"genus\") {\n      dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]\n    } else if (input$rank == \"Species\" | input$rank == \"species\") {\n      dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]\n    }\n\n    dt.out <- dt[J(unique(year)), mult = \"last\"]#[, Phylum := NULL]\n    dt.out[, id := cummax(id)]\n    numtaxa <- cummax(as.numeric(factor(dt$id)))\n    taxa_dt <- aggregate(numtaxa, list(year = dt$year), max)\n    colnames(taxa_dt) <- c(\"year\", \"taxa count\")\n    N_obs <- taxa_dt$'taxa count'\n    times <- as.numeric(taxa_dt$year)\n\n    SS <- getInitial(N_obs ~ SSlogis(times, alpha, xmid, scale),data = data.frame(N_obs = N_obs,times = times))\n    K_start <- SS[\"alpha\"]\n    R_start <- 1 / SS[\"scale\"]\n    N0_start <- SS[\"alpha\"] / (exp(SS[\"xmid\"] / SS[\"scale\"])) + 1\n\n    log_formula<-formula(N_obs ~ K * N0 * exp(R * times) / (K + N0 * (exp(R * times) - 1)))\n    m<-nls(log_formula, start = list(K = K_start, R = R_start, N0 = N0_start))\n\n    corr_coef <- cor(N_obs,predict(m))\n    lines(times, predict(m), col=\"red\", lty=2, lwd=2)\n    n = length(times)\n\n    ## add model predictions\n    K = summary(m)$coefficient[1]\n    R = summary(m)$coefficient[2]\n    N0 = summary(m)$coefficient[3]\n\n    ## add variances - first, find standard errors\n    K_se = summary(m)$coefficients[4]\n    R_se = summary(m)$coefficients[5]\n    N0_se = summary(m)$coefficients[6]\n\n    ## compute standard deviations\n    K_sd = K_se * sqrt(n)\n    R_sd = R_se * sqrt(n)\n    N0_sd = N0_se * sqrt(n)\n\n    # compute upper bounds of model prediction\n    UP = (K + K_sd) * (N0 + N0_sd) * exp((R + R_sd) * times) / ((K + K_sd) + (N0 + N0_sd) * (exp((R + R_sd) * times) - 1))\n    lines(times, UP, col = 'red', lty = \"dashed\")\n    LW = (K - K_sd) * (N0 - N0_sd) * exp((R - R_sd) * times) / ((K - K_sd) + (N0 - N0_sd) * (exp((R - R_sd) * times) - 1))\n    lines(times, LW, col ='red', lty = 'dashed')\n    taxa_dt <- taxa_dt\n })\n\n  ranklable <- reactive({\n    if (input$rank == \"Phylum\") {\n      paste(\"phyla\")\n    } else if (input$rank == \"Class\") {\n      paste(\"classes\")\n    } else if (input$rank == \"Order\") {\n      paste(\"orders\")\n    } else if (input$rank == \"Family\") {\n      paste(\"families\")\n    } else if (input$rank == \"Genus\") {\n      paste(\"genera\")\n    } else if (input$rank == \"Species\") {\n      paste(\"species\")\n    }\n  })\n\n## app output\n# A brief data view\n  output$dataview <- renderTable({\n    head(viewData(), n = 6)\n  }, caption = \"Brief Data View\", caption.placement = getOption(\"xtable.caption.placement\", \"top\"), cex = 5\n    )\n\n# visualise accumulative curve\n  output$taxacurve <- renderPlot({\n    if (input$model == FALSE) {\n      inFile <- input$file1\n      if(is.null(inFile))\n        return(NULL)\n      df <- read.csv(inFile$datapath, header = input$header)\n      df <- subset(df, Kingdoms == input$taxa | Phyla == input$taxa | Classes == input$taxa | Orders == input$taxa\n        | Families == input$taxa | Genera == input$taxa)\n      dt = as.data.table(unique(df))\n      setkey(dt, \"year\")\n      if (input$rank == \"Phylum\" | input$rank == \"phylum\") {\n        dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]\n      } else if (input$rank == \"Class\" | input$rank == \"class\") {\n        dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]\n      } else if (input$rank == \"Order\" | input$rank == \"order\") {\n        dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]\n      } else if (input$rank == \"Family\" | input$rank == \"family\") {\n        dt[, id := as.numeric(factor(Families, levels = unique(Families)))]\n      } else if (input$rank == \"Genus\" | input$rank == \"genus\") {\n        dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]\n      } else if (input$rank == \"Species\" | input$rank == \"species\") {\n        dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]\n      }\n      dt.out <- dt[J(unique(year)), mult = \"last\"]#[, Phylum := NULL]\n      dt.out[, id := cummax(id)]\n      numtaxa <- cummax(as.numeric(factor(dt$id)))\n      taxa_dt <- aggregate(numtaxa, list(year = dt$year), max)\n      colnames(taxa_dt) <- c(\"year\", \"taxa count\")\n      taxa_dt <- taxa_dt\n      plot(taxa_dt, xlab = \"Year\", ylab = paste(\"Number of\", tolower(input$rank), sep = \" \"), main = input$taxa, ylim = c(0, max(taxa_dt$\"taxa count\") * 1.35))\n          }\n    else if(input$model == TRUE) {\n      inFile <- input$file1\n      if(is.null(inFile))\n        return(NULL)\n      df <- read.csv(inFile$datapath, header = input$header)\n      df <- subset(df, Kingdoms == input$taxa | Phyla == input$taxa | Classes == input$taxa | Orders == input$taxa\n        | Families == input$taxa | Genera == input$taxa)\n      dt = as.data.table(unique(df))\n      setkey(dt, \"year\")\n      if (input$rank == \"Phylum\" | input$rank == \"phylum\") {\n        dt[, id := as.numeric(factor(Phyla, levels = unique(Phyla)))]\n      } else if (input$rank == \"Class\" | input$rank == \"class\") {\n        dt[, id := as.numeric(factor(Classes, levels = unique(Classes)))]\n      } else if (input$rank == \"Order\" | input$rank == \"order\") {\n        dt[, id := as.numeric(factor(Orders, levels = unique(Orders)))]\n      } else if (input$rank == \"Family\" | input$rank == \"family\") {\n        dt[, id := as.numeric(factor(Families, levels = unique(Families)))]\n      } else if (input$rank == \"Genus\" | input$rank == \"genus\") {\n        dt[, id := as.numeric(factor(Genera, levels = unique(Genera)))]\n      } else if (input$rank == \"Species\" | input$rank == \"species\") {\n        dt[, id := as.numeric(factor(AphiaIDs, levels = unique(AphiaIDs)))]\n      }\n      dt.out <- dt[J(unique(year)), mult = \"last\"]#[, Phylum := NULL]\n      dt.out[, id := cummax(id)]\n      numtaxa <- cummax(as.numeric(factor(dt$id)))\n      taxa_dt <- aggregate(numtaxa, list(year = dt$year), max)\n      colnames(taxa_dt) <- c(\"year\", \"taxa count\")\n      taxa_dt <- taxa_dt\n      plot(taxa_dt, xlab = \"Year\", ylab = paste(\"Number of\", tolower(input$rank), sep = \" \"), main = input$taxa, ylim = c(0, max(taxa_dt$\"taxa count\") * 1.35))\n\n      N_obs <- taxa_dt$'taxa count'\n      times <- as.numeric(taxa_dt$year)\n\n      SS<-getInitial(N_obs ~ SSlogis(times, alpha, xmid, scale),data = data.frame(N_obs = N_obs,times = times))\n      K_start <- SS[\"alpha\"]\n      R_start <- 1 / SS[\"scale\"]\n      N0_start <- SS[\"alpha\"] / (exp(SS[\"xmid\"] / SS[\"scale\"])) + 1\n\n      log_formula <- formula(N_obs ~ K * N0 * exp(R * times) / (K + N0 * (exp(R * times) - 1)))\n      m<-nls(log_formula, start = list(K = K_start, R = R_start, N0 = N0_start))\n\n      corr_coef <- cor(N_obs, predict(m))\n      lines(times, predict(m), col=\"red\", lty=2, lwd=2)\n      n = length(times)\n\n      ## add model predictions\n      K = summary(m)$coefficient[1]\n      R = summary(m)$coefficient[2]\n      N0 = summary(m)$coefficient[3]\n\n      ## add variances - first, find standard errors\n      K_se = summary(m)$coefficients[4]\n      R_se = summary(m)$coefficients[5]\n      N0_se = summary(m)$coefficients[6]\n\n      ## compute standard deviations\n      K_sd = K_se * sqrt(n)\n      R_sd = R_se * sqrt(n)\n      N0_sd = N0_se * sqrt(n)\n\n      # compute upper bounds of model prediction\n      UP = (K + K_sd) * (N0 + N0_sd) * exp((R + R_sd) * times) / ((K + K_sd) + (N0 + N0_sd) * (exp((R + R_sd) * times) - 1))\n      lines(times, UP, col = 'red', lty = \"dashed\")\n      LW = (K - K_sd) * (N0 - N0_sd) * exp((R - R_sd) * times) / ((K - K_sd) + (N0 - N0_sd) * (exp((R - R_sd) * times) - 1))\n      lines(times, LW, col ='red', lty = 'dashed')\n    }\n  })\n})\n",
    "created" : 1504615154951.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1418122844",
    "id" : "49879199",
    "lastKnownWriteTime" : 1504623053,
    "last_content_update" : 1504623053405,
    "path" : "~/Documents/ANTABIS/RASp/RAS species list/Shiny App/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}